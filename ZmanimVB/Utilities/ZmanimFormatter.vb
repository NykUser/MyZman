' * Zmanim .NET API
' * Copyright (C) 2004-2010 Eliyahu Hershfeld
' *
' * Converted to C# by AdminJew
' *
' * This file is part of Zmanim .NET API.
' *
' * Zmanim .NET API is free software: you can redistribute it and/or modify
' * it under the terms of the GNU Lesser General Public License as published by
' * the Free Software Foundation, either version 3 of the License, or
' * (at your option) any later version.
' *
' * Zmanim .NET API is distributed in the hope that it will be useful,
' * but WITHOUT ANY WARRANTY; without even the implied warranty of
' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' * GNU Lesser General Public License for more details.
' *
' * You should have received a copy of the GNU Lesser General Public License
' * along with Zmanim.NET API.  If not, see <http://www.gnu.org/licenses/lgpl.html>.

Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection
Imports System.Text

Namespace Zmanim.Utilities
    ''' <summary>
    ''' A class used to format non <seecref="DateTime"/> times generated by the
    ''' Zmanim package. For example the
    ''' <seecref="AstronomicalCalendar.GetTemporalHour()"/> returns
    ''' the length of the hour in milliseconds. This class can format this time.
    ''' </summary>
    ''' <author>Eliyahu Hershfeld</author>
    Public Class ZmanimFormatter
        ' private DecimalFormat decimalNF;

        ''' <summary>
        '''  Format using hours, minutes, seconds and milliseconds using the xsd:time
        '''  format. This format will return 00.00.00.0 when formatting 0.
        ''' </summary>
        Public Const SEXAGESIMAL_XSD_FORMAT As Integer = 0

        ''' <summary>
        '''  Format using standard decimal format with 5 positions after the decimal.
        ''' </summary>
        Public Const DECIMAL_FORMAT As Integer = 1

        ''' <summary>
        '''   Format using hours and minutes.
        ''' </summary>
        Public Const SEXAGESIMAL_FORMAT As Integer = 2

        ''' <summary>
        '''   Format using hours, minutes and seconds.
        ''' </summary>
        Public Const SEXAGESIMAL_SECONDS_FORMAT As Integer = 3

        ''' <summary>
        '''   Format using hours, minutes, seconds and milliseconds.
        ''' </summary>
        Public Const SEXAGESIMAL_MILLIS_FORMAT As Integer = 4

        ''' <summary>
        '''   constant for milliseconds in a minute (60,000)
        ''' </summary>
        Friend Const MINUTE_MILLIS As Long = 60 * 1000

        ''' <summary>
        '''   constant for milliseconds in an hour (3,600,000)
        ''' </summary>
        Public Const HOUR_MILLIS As Long = MINUTE_MILLIS * 60

        ''' <summary>
        '''  Format using the XSD Duration format. This is in the format of
        '''  PT1H6M7.869S (P for period (duration), T for time, H, M and S indicate
        '''  hours, minutes and seconds.
        ''' </summary>
        Public Const XSD_DURATION_FORMAT As Integer = 5
        Private Shared ReadOnly minuteSecondNF As String = "00"
        Private Shared ReadOnly milliNF As String = "000"
        Private ReadOnly hourNF As String
        Private prependZeroHours As Boolean
        Private timeFormat As Integer = SEXAGESIMAL_XSD_FORMAT
        Friend useDecimal As Boolean
        Private useMillis As Boolean
        Private useSeconds As Boolean

        ''' <summary>
        ''' </summary>
        Public Sub New()
            Me.New(0, "h:mm:ss")
        End Sub

        ''' <summary>
        '''  ZmanimFormatter constructor using a formatter
        ''' </summary>
        ''' <paramname="format">
        '''  int The formatting style to use. Using
        '''  ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT will format the
        '''  time time of 90*60*1000 + 1 as 1:30:00 </param>
        ''' <paramname="dateFormat">The date format.</param>
        Public Sub New(ByVal format As Integer, ByVal dateFormat As String)
            Dim hourFormat = "0"

            If prependZeroHours Then
                hourFormat = "00"
            End If

            hourNF = hourFormat
            ' decimalNF = new DecimalFormat("0.0####");
            SetTimeFormat(format)
            Me.DateFormat = dateFormat
        End Sub

        ''' <summary>
        '''  Sets the format to use for formatting.
        ''' </summary>
        ''' <paramname="format">
        '''  int the format constant to use. </param>
        Public Overridable Sub SetTimeFormat(ByVal format As Integer)
            timeFormat = format

            Select Case format
                Case SEXAGESIMAL_XSD_FORMAT
                    SetSettings(True, True, True)
                Case SEXAGESIMAL_FORMAT
                    SetSettings(False, False, False)
                Case SEXAGESIMAL_SECONDS_FORMAT
                    SetSettings(False, True, False)
                Case SEXAGESIMAL_MILLIS_FORMAT
                    SetSettings(False, True, True)
                Case Else
                    useDecimal = True
            End Select
        End Sub

        ''' <summary>
        '''   Gets the date format.
        ''' </summary>
        ''' <value></value>
        Public Overridable Property DateFormat As String

        Private Sub SetSettings(ByVal prependZeroHours As Boolean, ByVal useSeconds As Boolean, ByVal useMillis As Boolean)
            Me.prependZeroHours = prependZeroHours
            Me.useSeconds = useSeconds
            Me.useMillis = useMillis
        End Sub

        ''' <summary>
        '''  A method that formats milliseconds into a time format.
        ''' </summary>
        ''' <paramname="milliseconds">
        '''  The time in milliseconds. </param>
        ''' <returns> String The formatted <c>String</c> </returns>
        Public Overridable Function Format(ByVal milliseconds As Double) As String
            Return Format(CInt(milliseconds))
        End Function

        ''' <summary>
        '''  A method that formats milliseconds into a time format.
        ''' </summary>
        ''' <paramname="millis">
        '''  The time in milliseconds. </param>
        ''' <returns> String The formatted <c>String</c> </returns>
        Public Overridable Function Format(ByVal millis As Integer) As String
            Return Format(New Time(millis))
        End Function

        ''' <summary>
        '''  A method that formats <seecref="Time"/>objects.
        ''' </summary>
        ''' <paramname="time">
        '''  The time <c>Object</c> to be formatted. </param>
        ''' <returns> String The formatted <c>String</c> </returns>
        Public Overridable Function Format(ByVal time As Time) As String
            If timeFormat = XSD_DURATION_FORMAT Then
                Return FormatXSDDurationTime(time)
            End If

            Dim sb = New StringBuilder()
            sb.Append(time.Hours.ToString(hourNF))
            sb.Append(":")
            sb.Append(time.Minutes.ToString(minuteSecondNF))

            If useSeconds Then
                sb.Append(":")
                sb.Append(time.Seconds.ToString(minuteSecondNF))
            End If

            If useMillis Then
                sb.Append(".")
                sb.Append(time.Milliseconds.ToString(milliNF))
            End If

            Return sb.ToString()
        End Function

        ''' <summary>
        '''  Formats a date using this classe's <seecref="DateFormat">date format</see>.
        ''' </summary>
        ''' <paramname="date">
        '''  the date to format </param>
        ''' <paramname="dateWithLocation">
        '''  the <seecref="IDateWithLocation">TimeZone and DateTime</see> used to help format
        '''  based on the Calendar's DST and other settings. </param>
        ''' <returns> the formatted string </returns>
        Public Overridable Function FormatDate(ByVal [date] As Date, ByVal dateWithLocation As IDateWithLocation) As String
            If Equals(DateFormat, "yyyy-MM-dd'T'HH:mm:ss") Then
                Return GetXSDate([date], dateWithLocation)
            Else
                Return [date].ToString(DateFormat)
            End If
        End Function

        ''' <summary>
        '''  The date:date-time function returns the current date and time as a
        '''  date/time string. The date/time string that's returned must be a string
        '''  in the format defined as the lexical representation of xs:Date in
        '''  <ahref="http://www.w3.org/TR/xmlschema11-2/#Date">[3.3.8 Date]</a>
        '''  of <ahref="http://www.w3.org/TR/xmlschema11-2/">[XML Schema 1.1 Part 2:
        '''       Datatypes]</a>. The date/time format is basically CCYY-MM-DDThh:mm:ss,
        '''  although implementers should consult <ahref="http://www.w3.org/TR/xmlschema11-2/">[XML Schema 1.1 Part 2:
        '''                                         Datatypes]</a> and <ahref="http://www.iso.ch/markete/8601.pdf">[ISO
        '''                                                              8601]</a> for details. The date/time string format must include a time
        '''  zone, either a Z to indicate Coordinated Universal Time or a + or -
        '''  followed by the difference between the difference from UTC represented as
        '''  hh:mm.
        ''' </summary>
        Public Overridable Function GetXSDate(ByVal [date] As Date, ByVal cal As IDateWithLocation) As String
            Dim xsdDateFormat = "yyyy-MM-dd'T'HH:mm:ss"
            '        
            '		 * if (xmlDateFormat == null || xmlDateFormat.trim().equals("")) {
            '		 * xmlDateFormat = xsdDateFormat; }
            '		 
            'var dateFormat = new SimpleDateFormat(xsdDateFormat);

            Dim buff = New StringBuilder([date].ToString(xsdDateFormat))
            ' Must also include offset from UTF.
            ' Get the offset (in milliseconds).
            Dim offset = cal.Location.TimeZone.UtcOffset(cal.Date)
            ' If there is no offset, we have "Coordinated
            ' Universal Time."
            If offset = 0 Then
                buff.Append("Z")
            Else
                ' Convert milliseconds to hours and minutes
                Dim hrs As Integer = offset / (60 * 60 * 1000)
                ' In a few cases, the time zone may be +/-hh:30.
                Dim min = offset Mod 60 * 60 * 1000
                Dim posneg = If(hrs < 0, "-"c, "+"c)
                buff.Append(posneg & FormatDigits(hrs) & ":"c & FormatDigits(min))
            End If

            Return buff.ToString()
        End Function

        ''' <summary>
        '''  Represent the hours and minutes with two-digit strings.
        ''' </summary>
        ''' <paramname="digits"> hours or minutes. </param>
        ''' <returns> two-digit String representation of hrs or minutes. </returns>
        Private Shared Function FormatDigits(ByVal digits As Integer) As String
            Dim dd = Convert.ToString(Math.Abs(digits))
            Return If(dd.Length = 1, "0"c & dd, dd)
        End Function

        ''' <summary>
        '''  This returns the xml representation of an xsd:duration object.
        ''' </summary>
        ''' <paramname="millis"> the duration in milliseconds </param>
        ''' <returns> the xsd:duration formatted String </returns>
        Public Overridable Function FormatXSDDurationTime(ByVal millis As Long) As String
            Return FormatXSDDurationTime(New Time(millis))
        End Function

        ''' <summary>
        '''  This returns the xml representation of an xsd:duration object.
        ''' </summary>
        ''' <paramname="time"> the duration as a Time object  </param>
        ''' <returns> the xsd:duration formatted String </returns>
        Public Overridable Function FormatXSDDurationTime(ByVal time As Time) As String
            Dim duration = New StringBuilder()
            duration.Append("P")

            If time.Hours <> 0 OrElse time.Minutes <> 0 OrElse time.Seconds <> 0 OrElse time.Milliseconds <> 0 Then
                duration.Append("T")
                If time.Hours <> 0 Then duration.Append(time.Hours & "H")
                If time.Minutes <> 0 Then duration.Append(time.Minutes & "M")

                If time.Seconds <> 0 OrElse time.Milliseconds <> 0 Then
                    duration.Append(time.Seconds & "." & time.Milliseconds.ToString(milliNF))
                    duration.Append("S")
                End If

                If duration.Length = 1 Then duration.Append("T0S") ' zero seconds
                If time.IsNegative Then duration.Insert(0, "-")
            End If

            Return duration.ToString()
        End Function

        ''' <summary>
        '''  A method that returns an XML formatted <c>String</c> representing
        '''  the serialized <c>Object</c>. The format used is:
        ''' 	
        '''  <code>
        '''    &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;net.sourceforge.zmanim.AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;25.4&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;
        '''    &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;
        '''    &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;
        '''    ...
        '''    &lt;/AstronomicalTimes&gt;
        '''  </code>
        ''' 	
        '''  Note that the output uses the <ahref="http://www.w3.org/TR/xmlschema11-2/#Date">xsd:Date</a>
        '''  format for times such as sunrise, and <ahref="http://www.w3.org/TR/xmlschema11-2/#duration">xsd:duration</a>
        '''  format for times that are a duration such as the length of a
        '''  <seecref="AstronomicalCalendar.GetTemporalHour()">temporal hour</see>.
        '''  The output of this method is returned by the <seecref="AstronomicalCalendar.ToString"/> }.
        ''' </summary>
        ''' <returns> The XML formatted <c>String</c>. The format will be:
        ''' 	
        '''  <code>
        '''    &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;net.sourceforge.zmanim.AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;25.4&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;
        '''    &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;
        '''    &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;
        '''    ...
        '''    &lt;/AstronomicalTimes&gt;
        '''  </code>
        ''' </returns>
        Public Shared Function ToXml(ByVal ac As AstronomicalCalendar) As String
            Dim formatter = New ZmanimFormatter(XSD_DURATION_FORMAT, "yyyy-MM-dd'T'HH:mm:ss")
            Dim df = "yyyy-MM-dd"
            Dim output = New StringBuilder("<")

            If ac.GetType().Name.EndsWith("AstronomicalCalendar") Then
                output.Append("AstronomicalTimes")
            ElseIf ac.GetType().Name.EndsWith("ZmanimCalendar") Then
                output.Append("Zmanim")
            End If

            output.Append(" date=""" & ac.DateWithLocation.Date.ToString(df) & """")
            output.Append(" type=""" & ac.GetType().Name & """")
            output.Append(" algorithm=""" & ac.AstronomicalCalculator.CalculatorName & """")
            output.Append(" location=""" & ac.DateWithLocation.Location.LocationName & """")
            output.Append(" latitude=""" & ac.DateWithLocation.Location.Latitude & """")
            output.Append(" longitude=""" & ac.DateWithLocation.Location.Longitude & """")
            output.Append(" elevation=""" & ac.DateWithLocation.Location.Elevation & """")
            output.Append(" timeZoneName=""" & ac.DateWithLocation.Location.TimeZone.GetDisplayName() & """")
            output.Append(" timeZoneID=""" & ac.DateWithLocation.Location.TimeZone.GetId() & """")
            output.Append(" timeZoneOffset=""" & (ac.DateWithLocation.Location.TimeZone.GetOffset(ac.DateWithLocation.Date.ToFileTime()) / HOUR_MILLIS) & """")
            output.Append(">" & Microsoft.VisualBasic.Constants.vbLf)
#If Not NO_TYPE_GET_METHODS Then
            Dim theMethods = ac.GetType().GetMethods().ToList()
#Else
            var theMethods = ac.GetType().GetTypeInfo().DeclaredMethods.ToList();
#End If
            Dim tagName = ""
            Dim value As Object = Nothing
            Dim dateList As IList(Of Zman) = New List(Of Zman)()
            Dim durationList As IList(Of Zman) = New List(Of Zman)()
            Dim otherList As IList(Of String) = New List(Of String)()

            For i = 0 To theMethods.Count - 1

                If IncludeMethod(theMethods(i)) Then
                    tagName = theMethods(i).Name.Substring(3)

                    Try
                        value = theMethods(i).Invoke(ac, Nothing)

                        If value Is Nothing Then 'FIXME: use reflection to determine what the return type is, not the value
                            otherList.Add("<" & tagName & ">N/A</" & tagName & ">")
                        ElseIf TypeOf value Is Date Then
                            dateList.Add(New Zman(CDate(value), tagName)) ' shaah zmanis
                        ElseIf TypeOf value Is Long? Then
                            durationList.Add(New Zman(CInt(CType(value, Long?)), tagName)) ' will probably never enter this block, but is
                        Else
                            ' present to be future proof
                            otherList.Add("<" & tagName & ">" & value & "</" & tagName & ">")
                        End If

                    Catch e As Exception
                        output.Append(e.StackTrace)
                        Throw
                    End Try
                End If
            Next

            For Each zman In dateList.OrderBy(Function(x) x.ZmanTime)
                output.Append(Microsoft.VisualBasic.Constants.vbTab & "<" & zman.ZmanLabel)
                output.Append(">")
                output.Append(formatter.FormatDate(zman.ZmanTime, ac.DateWithLocation) & "</" & zman.ZmanLabel & ">" & Microsoft.VisualBasic.Constants.vbLf)
            Next

            For Each zman In durationList.OrderBy(Function(x) x.Duration)
                output.Append(Microsoft.VisualBasic.Constants.vbTab & "<" & zman.ZmanLabel)
                output.Append(">")
                output.Append(formatter.Format(CInt(zman.Duration)) & "</" & zman.ZmanLabel & ">" & Microsoft.VisualBasic.Constants.vbLf)
            Next

            For Each t In otherList
                ' will probably never enter this block
                output.Append(Microsoft.VisualBasic.Constants.vbTab & t & Microsoft.VisualBasic.Constants.vbLf)
            Next

            If ac.GetType().Name.EndsWith("AstronomicalCalendar") Then
                output.Append("</AstronomicalTimes>")
            ElseIf ac.GetType().Name.EndsWith("ZmanimCalendar") Then
                output.Append("</Zmanim>")
            End If

            Return output.ToString()
        End Function

        ''' <summary>
        '''  Determines if a method should be output by the <seecref="ToXml"/>
        ''' </summary>
        ''' <paramname="method"> Should this method be inculeded. </param>
        Private Shared Function IncludeMethod(ByVal method As MethodInfo) As Boolean
            Dim methodWhiteList As IList(Of String) = New List(Of String)()
            ' methodWhiteList.add("getName");

            Dim methodBlackList As IList(Of String) = New List(Of String)()
            ' methodBlackList.add("getGregorianChange");

            If methodWhiteList.Contains(method.Name) Then Return True
            If methodBlackList.Contains(method.Name) Then Return False
            If method.GetParameters().Length > 0 Then Return False ' Skip get methods with parameters since we do not
            ' know what value to pass

            If Not method.Name.ToLower().StartsWith("get") Then Return False

            If method.ReturnType Is GetType(Date) OrElse method.ReturnType Is GetType(Long) Then
                Return True
            End If

            Return False
        End Function
    End Class
End Namespace
