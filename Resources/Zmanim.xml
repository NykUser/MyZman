<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zmanim</name>
    </assembly>
    <members>
        <member name="T:Zmanim.ComplexZmanimCalendar">
            <summary>
            This class extends ZmanimCalendar and provides many more zmanim than
            available in the ZmanimCalendar. The basis for most zmanim in this class are
            from the <em>sefer</em> <b>Yisroel Vehazmanim</b> by <b>Rabbi Yisroel Dovid  Harfenes</b>. <br/>
            For an example of the number of different <em>zmanim</em> made available by
            this class, there are methods to return 12 different calculations for
            <em>alos</em> (dawn) available in this class. The real power of this API is
            the ease in calculating <em>zmanim</em> that are not part of the API. The
            methods for doing <em>zmanim</em> calculations not present in this or it's
            superclass the <see cref="T:Zmanim.ZmanimCalendar"/> are contained in the
            <see cref="T:Zmanim.AstronomicalCalendar"/>, the base class of the calendars in our API
            since they are generic methods for calculating time based on degrees or time
            before or after <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise"</see> and <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see> and
            are of interest for calculation beyond <em>zmanim</em> calculations. Here are
            some examples: <br/>
            First create the Calendar for the location you would like to calculate:
            <example>
            		<code>
            string locationName = "Lakewood, NJ"
            double latitude = 40.0828; //Lakewood, NJ
            double longitude = -74.2094; //Lakewood, NJ
            double elevation = 0;
            ITimeZone timeZone = new JavaTimeZone("America/New_York");
            GeoLocation location = new GeoLocation(locationName, latitude, longitude,
            elevation, timeZone);
            ComplexZmanimCalendar czc = new ComplexZmanimCalendar(DateTime.Now, location);
            </code>
            	</example>
            Note: For locations such as Israel where the beginning and end of daylight
            savings time can fluctuate from year to year create a
            <see cref="T:Zmanim.TimeZone.ITimeZone"/> with the known start and end of DST. <br/>
            To get alos calculated as 14° below the horizon (as calculated in the
            calendars published in Montreal) use:
            <code>
            DateTime alos14 = czc.getSunriseOffsetByDegrees(14);
            </code>
            To get <em>mincha gedola</em> calculated based on the MGA using a <em>shaah zmanis</em> based on the day starting 16.1° below the horizon (and ending
            16.1° after sunset the following calculation can be used:
            <code>
            DateTime minchaGedola = czc.getTimeOffset(czc.getAlos16point1Degrees(),
            czc.getShaahZmanis16Point1Degrees() * 6.5);
            </code>
            A little more complex example would be calculating <em>plag hamincha</em>
            based on a shaah zmanis that was not present in this class. While a drop more
            complex it is still rather easy. For example if you wanted to calculate
            <em>plag</em> based on the day starting 12° before sunrise and ending
            12° after sunset as calculated in the calendars in Manchester, England
            (there is nothing that would prevent your calculating the day using sunrise
            and sunset offsets that are not identical degrees, but this would lead to
            chatzos being a time other than the <see cref="M:Zmanim.AstronomicalCalendar.GetSunTransit">solar transit</see>
            (solar midday)). The steps involved would be to first calculate the
            <em>shaah zmanis</em> and than use that time in milliseconds to calculate
            10.75 hours after sunrise starting at 12° before sunset
            <code>
            long shaahZmanis = czc.getTemporalHour(czc.getSunriseOffsetByDegrees(12),
            czc.getSunsetOffsetByDegrees(12));
            DateTime plag = getTimeOffset(czc.getSunriseOffsetByDegrees(12),
            shaahZmanis * 10.75);
            </code>
            	<h2>Disclaimer:</h2> While I did my best to get accurate results please do
            not rely on these zmanim for <em>halacha lemaaseh</em>
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_3_POINT_7">
            <summary>
              The zenith of 3.7° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>tzais</em>
              (nightfall) according to some opinions. This calculation is based on the
              opinion of the Geonim that <em>tzais</em> is the time it takes to walk
              3/4 of a Mil at 18 minutes a Mil, or 13.5 minutes after sunset. The sun
              is 3.7° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see> at this time
              in Jerusalem on March 16, about 4 days before the equinox, the day that a
              solar hour is one hour.
            </summary>
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_5_POINT_95">
            <summary>
              The zenith of 5.95° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>tzais</em>
              (nightfall) according to some opinions. This calculation is based on the
              position of the sun 24 minutes after sunset in Jerusalem on March 16,
              about 4 days before the equinox, the day that a solar hour is one hour,
              which calculates to 5.95° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim5Point95Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_7_POINT_083">
            <summary>
              The zenith of 7.083° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This is often referred to as 7°5' or 7° and 5 minutes.
              This calculation is used for calculating <em>alos</em> (dawn) and
              <em>tzais</em> (nightfall) according to some opinions. This calculation
              is based on the position of the sun 30 minutes after sunset in Jerusalem
              on March 16, about 4 days before the equinox, the day that a solar hour
              is one hour, which calculates to 7.0833333° below
              <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>. This is time some opinions
              consider dark enough for 3 stars to be visible. This is the opinion of
              the Shu"t Melamed Leho'il, Shu"t Binyan Tziyon, Tenuvas Sadeh and very
              close to the time of the Mekor Chesed on the Sefer chasidim.
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetBainHasmashosRT13Point5MinutesBefore7Point083Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_10_POINT_2">
            <summary>
              The zenith of 10.2° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>misheyakir</em>
              according to some opinions. This calculation is based on the position of
              the sun 45 minutes before <see cref = "M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> in Jerusalem on
              March 16, about 4 days before the equinox, the day that a solar hour is
              one hour which calculates to 10.2° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH"> geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetMisheyakir10Point2Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_11_DEGREES">
            <summary>
              The zenith of 11° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>misheyakir</em>
              according to some opinions. This calculation is based on the position of
              the sun 48 minutes before <see cref ="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> in Jerusalem on
              March 16, about 4 days before the equinox, the day that a solar hour is
              one hour which calculates to 11° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH"> geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetMisheyakir11Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_11_POINT_5">
            <summary>
              The zenith of 11.5° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>misheyakir</em>
              according to some opinions. This calculation is based on the position of
              the sun 52 minutes before <see cref ="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> in Jerusalem on
              March 16, about 4 days before the equinox, the day that a solar hour is
              one hour which calculates to 11.5° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH"> geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetMisheyakir11Point5Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_13_POINT_24">
            <summary>
              The zenith of 13° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating
              <em>Rabainu Tam's bain hashmashos</em> according to some opinions. <br />
              <br />
             NOTE: See comments on <see cref="M:Zmanim.ComplexZmanimCalendar.GetBainHasmashosRT13Point24Degrees"/>for additional details about the degrees
            </summary>
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_19_POINT_8">
            <summary>
              The zenith of 19.8° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>alos</em> (dawn)
              and <em>tzais</em> (nightfall) according to some opinions. This
              calculation is based on the position of the sun 90 minutes after sunset
              in Jerusalem on March 16, about 4 days before the equinox, the day that a
              solar hour is one hour which calculates to 19.8° below
              <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzais19Point8Degrees" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetAlos90" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzais90" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_26_DEGREES">
            <summary>
              The zenith of 26° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>alos</em> (dawn)
              and <em>tzais</em> (nightfall) according to some opinions. This
              calculation is based on the position of the sun <see cref = "M:Zmanim.ComplexZmanimCalendar.GetAlos120">120 minutes</see>
              after sunset in Jerusalem on March 16, about 4 days before the
              equinox, the day that a solar hour is one hour which calculates to
              26° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzais26Degrees" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetAlos120" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzais120" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_37">
            NOTE: Experimental and may not make the final 1.3 cut
            <summary>
              The zenith of 4.37° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>tzais</em>
              (nightfall) according to some opinions. This calculation is based on the
              position of the sun <see cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim4Point37Degrees">16 7/8 minutes</see>
              after sunset (3/4 of a 22.5 minute Mil) in Jerusalem on March
              16, about 4 days before the equinox, the day that a solar hour is one
              hour which calculates to 4.37° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH"> geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim4Point37Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_61">
            <summary>
              The zenith of 4.61° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>tzais</em>
              (nightfall) according to some opinions. This calculation is based on the
              position of the sun <see cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim4Point37Degrees">18 minutes</see>
              after sunset (3/4 of a 24 minute Mil) in Jerusalem on March 16, about 4
              days before the equinox, the day that a solar hour is one hour which
              calculates to 4.61° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim4Point61Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_8">
            <summary>
            The zenith of 4.8° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>(90°).
            </summary>
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_3_POINT_65">
            <summary>
              The zenith of 3.65° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
              (90°). This calculation is used for calculating <em>tzais</em>
              (nightfall) according to some opinions. This calculation is based on the
              position of the sun <see cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim3Point65Degrees">13.5 minutes</see>
              after sunset (3/4 of an 18 minute Mil) in Jerusalem on March 16, about 4
              days before the equinox, the day that a solar hour is one hour which
              calculates to 3.65° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">see zenith</see>
            </summary>
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim3Point65Degrees" />
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_5_POINT_88">
            <summary>
            The zenith of 5.88° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>
            (90°).
            </summary>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.#ctor(Zmanim.Utilities.IGeoLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.ComplexZmanimCalendar"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.#ctor(System.DateTime,Zmanim.Utilities.IGeoLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.ComplexZmanimCalendar"/> class.
            </summary>
            <param name="date">The date.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.#ctor(Zmanim.IDateWithLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.ComplexZmanimCalendar"/> class.
            </summary>
            <param name="dateWithLocation">The date with location.</param>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.#ctor">
            <summary>
            Default constructor will set a default <see cref="T:Zmanim.Utilities.GeoLocation"/>,
            a default <see cref="M:Zmanim.Calculator.AstronomicalCalculator.GetDefault"> AstronomicalCalculator</see>
            and default the calendar to the current date.
            </summary>
            <seealso cref="T:Zmanim.AstronomicalCalendar"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) calculated using
            a 19.8° dip. This calculation divides the day based on the opinion of
            the MGA that the day runs from dawn to dusk. Dawn for this calculation is
            when the sun is 19.8° below the eastern geometric horizon before
            sunrise. Dusk for this is when the sun is 19.8° below the western
            geometric horizon after sunset. This day is split into 12 equal parts
            with each part being a <em>shaah zmanis</em>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as northern and southern locations even south of the Arctic
            Circle and north of the Antarctic Circle where the sun may not
            reach low enough below the horizon for this calculation, a
            <seealso cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation on
            top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis18Degrees">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) calculated using
            a 18° dip. This calculation divides the day based on the opinion of
            the MGA that the day runs from dawn to dusk. Dawn for this calculation is
            when the sun is 18° below the eastern geometric horizon before
            sunrise. Dusk for this is when the sun is 18° below the western
            geometric horizon after sunset. This day is split into 12 equal parts
            with each part being a <em>shaah zmanis</em>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as northern and southern locations even south of the Arctic
            Circle and north of the Antarctic Circle where the sun may not
            reach low enough below the horizon for this calculation, a
            <seealso cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation on
            top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis26Degrees">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) calculated using
            a dip of 26°. This calculation divides the day based on the opinion
            of the MGA that the day runs from dawn to dusk. Dawn for this calculation
            is when the sun is <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees">26°</see> below the eastern
            geometric horizon before sunrise. Dusk for this is when the sun is
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais26Degrees">26°</see> below the western geometric horizon
            after sunset. This day is split into 12 equal parts with each part being
            a <em>shaah zmanis</em>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a
            <em>shaah zmanis</em>. If the calculation can't be computed such
            as northern and southern locations even south of the Arctic
            Circle and north of the Antarctic Circle where the sun may not
            reach low enough below the horizon for this calculation, a
            <seealso cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation on
            top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) calculated using
            a dip of 16.1°. This calculation divides the day based on the opinion
            that the day runs from dawn to dusk. Dawn for this calculation is when
            the sun is 16.1° below the eastern geometric horizon before sunrise
            and dusk is when the sun is 16.1° below the western geometric horizon
            after sunset. This day is split into 12 equal parts with each part being
            a <em>shaah zmanis</em>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as northern and southern locations even south of the Arctic
            Circle and north of the Antarctic Circle where the sun may not
            reach low enough below the horizon for this calculation, a
            <seealso cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation on
            top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaKetana16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha16Point1Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis60Minutes">
            <summary>
            Method to return a <em>shaah zmanis</em> (solar hour) according to the
            opinion of the MGA. This calculation divides the day based on the opinion
            of the <em>MGA</em> that the day runs from dawn to dusk. Dawn for this
            calculation is 60 minutes before sunrise and dusk is 60 minutes after
            sunset. This day is split into 12 equal parts with each part being a
            <em>shaah zmanis</em>. Alternate mothods of calculating a
            <em>shaah zmanis</em> are available in the subclass
            <see cref="T:Zmanim.ComplexZmanimCalendar"/>
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes">
            <summary>
            Method to return a <em>shaah zmanis</em> (solar hour) according to the
            opinion of the MGA. This calculation divides the day based on the opinion
            of the <em>MGA</em> that the day runs from dawn to dusk. Dawn for this
            calculation is 72 minutes before sunrise and dusk is 72 minutes after
            sunset. This day is split into 12 equal parts with each part being a
            <em>shaah zmanis</em>. Alternate mothods of calculating a
            <em>shaah zmanis</em> are available in the subclass
            <see cref="T:Zmanim.ComplexZmanimCalendar"/>
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72MinutesZmanis">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) according to the
            opinion of the MGA based on <em>alos</em> being
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">72</see> minutes <em>zmaniyos</em> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This calculation divides the day based on
            the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn
            for this calculation is 72 minutes <em>zmaniyos</em> before sunrise and
            dusk is 72 minutes <em>zmaniyos</em> after sunset. This day is split into
            12 equal parts with each part being a <em>shaah zmanis</em>. This is
            identical to 1/10th of the day from <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> to
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais72Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) calculated using
            a dip of 90 minutes. This calculation divides the day based on the
            opinion of the MGA that the day runs from dawn to dusk. Dawn for this
            calculation is 90 minutes before sunrise and dusk is 90 minutes after
            sunset. This day is split into 12 equal parts with each part being a
            <em>shaah zmanis</em>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) according to the
            opinion of the MGA based on <em>alos</em> being
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">90</see> minutes <em>zmaniyos</em> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This calculation divides the day based on
            the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn
            for this calculation is 90 minutes <em>zmaniyos</em> before sunrise and
            dusk is 90 minutes <em>zmaniyos</em> after sunset. This day is split into
            12 equal parts with each part being a <em>shaah zmanis</em>. This is
            identical to 1/8th of the day from <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> to
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais90Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96MinutesZmanis">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) according to the
            opinion of the MGA based on <em>alos</em> being
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">96</see> minutes <em>zmaniyos</em> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This calculation divides the day based on
            the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn
            for this calculation is 96 minutes <em>zmaniyos</em> before sunrise and
            dusk is 96 minutes <em>zmaniyos</em> after sunset. This day is split into
            12 equal parts with each part being a <em>shaah zmanis</em>. This is
            identical to 1/7.5th of the day from <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> to
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais96Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) according to the
            opinion of the Chacham Yosef Harari-Raful of Yeshivat Ateret Torah
            calculated with <em>alos</em> being 1/10th of sunrise to sunset day, or
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">72</see> minutes <em>zmaniyos</em> of such a day
            before <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>, and tzais is usually calculated as
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah">40 minutes</see> after <see cref="M:Zmanim.AstronomicalCalendar.GetSunset"> sunset</see>.
            This day is split into 12 equal parts with each part being a
            <em>shaah zmanis</em>. Note that with this system, chatzos (mid-day) will
            not be the point that the sun is <see cref="M:Zmanim.AstronomicalCalendar.GetSunTransit">halfway across the sky</see>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah"/>
            <seealso cref="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) calculated using
            a dip of 96 minutes. This calculation divides the day based on the
            opinion of the MGA that the day runs from dawn to dusk. Dawn for this
            calculation is 96 minutes before sunrise and dusk is 96 minutes after
            sunset. This day is split into 12 equal parts with each part being a
            <em>shaah zmanis</em>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) calculated using
            a dip of 120 minutes. This calculation divides the day based on the
            opinion of the MGA that the day runs from dawn to dusk. Dawn for this
            calculation is 120 minutes before sunrise and dusk is 120 minutes after
            sunset. This day is split into 12 equal parts with each part being a
            <em>shaah zmanis</em>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120MinutesZmanis">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) according to the
            opinion of the MGA based on <em>alos</em> being
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120Zmanis">120</see> minutes <em>zmaniyos</em> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This calculation divides the day based on
            the opinion of the <em>MGA</em> that the day runs from dawn to dusk. Dawn
            for this calculation is 120 minutes <em>zmaniyos</em> before sunrise and
            dusk is 120 minutes <em>zmaniyos</em> after sunset. This day is split
            into 12 equal parts with each part being a <em>shaah zmanis</em>. This is
            identical to 1/6th of the day from <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> to
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set, a
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation
            on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais120Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha120MinutesZmanis">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120Zmanis">dawn</see>. The
            formula used is:<br/>
            10.75 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120MinutesZmanis"/> after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120Zmanis">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha120Minutes">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">dawn</see>. The formula
            used is:<br/>
            10.75 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos60">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 60 minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see> on the time to walk the
            distance of 4 <em>Mil</em> at 15 minutes a <em>Mil</em> (the opinion of
            the Chavas Yair. See the Divray Malkiel). This is based on the opinion of
            most <em>Rishonim</em> who stated that the time of the <em>Neshef</em>
            (time between dawn and sunrise) does not vary by the time of year or
            location but purely depends on the time it takes to walk the distance of
            4 <em>Mil</em>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 72 minutes
            <em>zmaniyos</em>( <em>GR"A</em> and the <em>Baal Hatanya</em>) or 1/10th
            of the day before sea level sunrise. This is based on an 18 minute
            <em>Mil</em> so the time for 4 <em>Mil</em> is 72 minutes which is 1/10th
            of a day (12 * 60 = 720) based on the day starting at
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see> and ending at
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>. The actual alculation is
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise"/>- ( <see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> * 1.2).
            This calculation is used in the calendars published by
            <em>Hisachdus Harabanim D'Artzos Habris Ve'Kanada</em>
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos96">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 96 minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see> based on the time to walk
            the distance of 4 <em>Mil</em> at 24 minutes a <em>Mil</em>. This is
            based on the opinion of most <em>Rishonim</em> who stated that the time
            of the <em>Neshef</em> (time between dawn and sunrise) does not vary by
            the time of year or location but purely depends on the time it takes to
            walk the distance of 4 <em>Mil</em>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 90 minutes
            <em>zmaniyos</em>( <em>GR"A</em> and the <em>Baal Hatanya</em>) or 1/8th
            of the day before sea level sunrise. This is based on a 22.5 minute
            <em>Mil</em> so the time for 4 <em>Mil</em> is 90 minutes which is 1/8th
            of a day (12 * 60 = 720) /8 =90 based on the day starting at
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> and ending at <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</seealso>.
            The actual calculation is <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise"/> - (
            <see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> * 1.5).
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 90 minutes
            <em>zmaniyos</em>( <em>GR"A</em> and the <em>Baal Hatanya</em>) or 1/8th
            of the day before sea level sunrise. This is based on a 24 minute
            <em>Mil</em> so the time for 4 <em>Mil</em> is 90 minutes which is
            1/7.5th of a day (12 * 60 = 720) / 7.5 =96 based on the day starting at
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> and ending at <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>.
            The actual calculation is <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise"/> - (
            <see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> * 1.6).
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos90">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 90 minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see> on the time to walk the
            distance of 4 <em>Mil</em> at 22.5 minutes a <em>Mil</em>. This is based
            on the opinion of most <em>Rishonim</em> who stated that the time of the
            <em>Neshef</em> (time between dawn and sunrise) does not vary by the time
            of year or location but purely depends on the time it takes to walk the
            distance of 4 <em>Mil</em>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos120">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 120 minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see> (no adjustment for
            elevation is made) based on the time to walk the distance of 5
            <em>Mil</em>( <em>Ula</em>) at 24 minutes a <em>Mil</em>. This is based
            on the opinion of most <em>Rishonim</em> who stated that the time of the
            <em>Neshef</em> (time between dawn and sunrise) does not vary by the time
            of year or location but purely depends on the time it takes to walk the
            distance of 5 <em>Mil</em>(<em>Ula</em>).
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos120Zmanis">
            <summary>
            Method to return <em>alos</em> (dawn) calculated using 120 minutes
            <em>zmaniyos</em>( <em>GR"A</em> and the <em>Baal Hatanya</em>) or 1/6th
            of the day before sea level sunrise. This is based on a 24 minute
            <em>Mil</em> so the time for 5 <em>Mil</em> is 120 minutes which is 1/6th
            of a day (12 * 60 = 720) / 6 =120 based on the day starting at
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> and ending at <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>.
            The actual calculation is <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise"/> - (
            <see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> * 2).
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees">
            <summary>
            Method to return <em>alos</em> (dawn) calculated when the sun is
            <see cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_26_DEGREES">26°</see> below the eastern geometric horizon
            before sunrise. This calculation is based on the same calculation of
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">120 minutes</see> but uses a degree based calculation
            instead of 120 exact minutes. This calculation is based on the position
            of the sun 120 minutes before sunrise in Jerusalem in the equinox which
            calculates to 26° below <see cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>.
            </summary>
            <returns>
            the <c>DateTime</c> representing <em>alos</em>.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_26_DEGREES"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais120"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos18Degrees">
            <summary>
            to return <em>alos</em> (dawn) calculated when the sun is
            <see cref="F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH">18°</see> below the eastern geometric horizon
            before sunrise.
            </summary>
            <returns>
            the <c>DateTime</c> representing <em>alos</em>.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">
            <summary>
            Method to return <em>alos</em> (dawn) calculated when the sun is
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_19_POINT_8">19.8°</seealso> below the eastern geometric horizon
            before sunrise. This calculation is based on the same calculation of
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">90 minutes</seealso> but uses a degree based calculation
            instead of 90 exact minutes. This calculation is based on the position of
            the sun 90 minutes before sunrise in Jerusalem in the equinox which
            calculates to 19.8° below <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso>
            </summary>
            <returns>
            the <c>DateTime</c> representing <em>alos</em>.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_19_POINT_8"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">
            <summary>
            Method to return <em>alos</em> (dawn) calculated when the sun is
            <seealso cref="F:Zmanim.ZmanimCalendar.ZENITH_16_POINT_1">16.1°</seealso> below the eastern geometric horizon
            before sunrise. This calculation is based on the same calculation of
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72">72 minutes</seealso> but uses a degree based calculation
            instead of 72 exact minutes. This calculation is based on the position of
            the sun 72 minutes before sunrise in Jerusalem in the equinox which
            calculates to 16.1° below <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> representing <em>alos</em>.
            If the
            calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="F:Zmanim.ZmanimCalendar.ZENITH_16_POINT_1"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMisheyakir11Point5Degrees">
            <summary>
            This method returns <em>misheyakir</em> based on the position of the sun
            when it is <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_11_DEGREES">11.5°</seealso> below
            <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso> (90°). This calculation is
            used for calculating <em>misheyakir</em> according to some opinions. This
            calculation is based on the position of the sun 52 minutes before
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso>in Jerusalem in the equinox which calculates
            to 11.5° below <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso>
            </summary>
            <returns>
            the <c>DateTime</c> of misheyakir. If the calculation can't be
            computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            ///
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_11_POINT_5"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMisheyakir11Degrees">
            <summary>
            This method returns <em>misheyakir</em> based on the position of the sun
            when it is <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_11_DEGREES">11°</seealso> below
            <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso> (90°). This calculation is
            used for calculating <em>misheyakir</em> according to some opinions. This
            calculation is based on the position of the sun 48 minutes before
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso>in Jerusalem in the equinox which calculates
            to 11° below <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso>
            </summary>
            <returns>
            If the calculation can't be computed such as northern and
            southern locations even south of the Arctic Circle and north of
            the Antarctic Circle where the sun may not reach low enough below
            the horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_11_DEGREES"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMisheyakir10Point2Degrees">
            <summary>
            This method returns <em>misheyakir</em> based on the position of the sun
            when it is <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_10_POINT_2">10.2°</seealso> below
            <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso> (90°). This calculation is
            used for calculating <em>misheyakir</em> according to some opinions. This
            calculation is based on the position of the sun 45 minutes before
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso> in Jerusalem in the equinox which calculates
            to 10.2° below <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso>
            </summary>
            <returns>
            the <c>DateTime</c> of the latest misheyakir.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_10_POINT_2"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA19Point8Degrees">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">19.8°</seealso> before
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso>. This time is 3
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees">shaos zmaniyos</seealso></em> (solar
            hours) after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">dawn</seealso> based on the opinion
            of the <em>MG"A</em> that the day is calculated from dawn to nightfall
            with both being 19.8° below sunrise or sunset. This returns the time
            of 3 <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA16Point1Degrees">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">16.1°</seealso> before
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso>. This time is 3
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees">shaos zmaniyos</seealso></em> (solar
            hours) after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</seealso> based on the opinion
            of the <em>MG"A</em> that the day is calculated from dawn to nightfall
            with both being 16.1° below sunrise or sunset. This returns the time
            of 3 <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA18Degrees" -->
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA72Minutes">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">72</see> minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 3
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes">shaos zmaniyos</see></em> (solar hours)
            after <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</see> based on the opinion of the <em>MG"A</em>
            that the day is calculated from a <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</see> of 72 minutes
            before sunrise to <see cref="M:Zmanim.ZmanimCalendar.GetTzais72">nightfall</see> of 72 minutes after
            sunset. This returns the time of 3 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/>
            after <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</see>. This class returns an identical time to
            <see cref="M:Zmanim.ZmanimCalendar.GetSofZmanShmaMGA"/> and is repeated here for clarity.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetSofZmanShmaMGA"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA72MinutesZmanis">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">72</see> minutes
            <em>zmaniyos</em>, or 1/10th of the day before <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise"> sunrise</see>
            . This time is 3
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</see> of 72 minutes <em>zmaniyos</em>, or
            1/10th of the day before <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see>
            to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais72Zmanis">nightfall</see> of 72 minutes <em>zmaniyos</em>
            after <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>. This returns the
            time of 3 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72MinutesZmanis"/> after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72MinutesZmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA90Minutes">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">90</see> minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 3
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes">shaos zmaniyos</see></em> (solar hours)
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">dawn</see> based on the opinion of the <em>MG"A</em>
            that the day is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">dawn</see> of 90 minutes
            before sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais90">nightfall</see> of 90 minutes after
            sunset. This returns the time of 3 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes"/>
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA90MinutesZmanis">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">90</see> minutes
            <em>zmaniyos</em> before <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 3
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">dawn</see> of 90 minutes <em>zmaniyos</em> before
            sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais90Zmanis">nightfall</see> of 90 minutes
            <em>zmaniyos</em> after sunset. This returns the time of 3 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis"> dawn</see>
            .
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA96Minutes">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">96</see> minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 3
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes">shaos zmaniyos</see></em> (solar hours)
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">dawn</see> based on the opinion of the <em>MG"A</em>
            that the day is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">dawn</see> of 96 minutes
            before sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais96">nightfall</see> of 96 minutes after
            sunset. This returns the time of 3 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes"/>
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA96MinutesZmanis">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">96</see> minutes
            <em>zmaniyos</em> before <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 3
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96MinutesZmanis">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">dawn</see> of 96 minutes <em>zmaniyos</em> before
            sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais90Zmanis">nightfall</see> of 96 minutes
            <em>zmaniyos</em> after sunset. This returns the time of 3 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96MinutesZmanis"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis"> dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96MinutesZmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShma3HoursBeforeChatzos">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) calculated as 3 hours (regular and not zmaniyos)
            before <see cref="M:Zmanim.ZmanimCalendar.GetChatzos"/>. This is the opinion of the
            <em>Shach</em> in the
            <em>Nekudas Hakesef (Yora Deah 184), Shevus Yaakov, Chasan Sofer</em> and
            others.This returns the time of 3 hours before
            <see cref="M:Zmanim.ZmanimCalendar.GetChatzos"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetChatzos"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfila2HoursBeforeChatzos"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA120Minutes">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">120</see> minutes or 1/6th of the day
            before <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 3
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes">shaos zmaniyos</see></em> (solar hours)
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120"> dawn</see>
            of 120 minutes before sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais120">nightfall</see>
            of 120 minutes after sunset. This returns the time of 3 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaAlos16Point1ToSunset">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) based on the opinion that the day starts at
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</see></em> and ends at
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>. 3 shaos zmaniyos are
            calculated based on this day and added to
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos</see>to reach this time. This time is 3
            <em>shaos zmaniyos</em> (solar hours) after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</see> based on the opinion that the day
            is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</see> to
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>.<br/>
            	<b>Note: </b> Based on this calculation <em>chatzos</em> will not be at
            midday.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema based on this day.
            If the calculation can't be computed such as northern and
            southern locations even south of the Arctic Circle and north of
            the Antarctic Circle where the sun may not reach low enough below
            the horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) based on the opinion that the day starts at
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</see></em> and ends at
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees">tzais 7.083°</see>. 3
            <em>shaos zmaniyos</em> are calculated based on this day and added to
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos</see> to reach this time. This time is 3
            <em>shaos zmaniyos</em> (temporal hours) after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</see> based on the opinion
            that the day is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</see>
            to
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees">tzais 7.083°</see></em>.<br/>
            	<b>Note: </b> Based on this calculation <em>chatzos</em> will not be at
            midday.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema based on this
            calculation. If the calculation can't be computed such as
            northern and southern locations even south of the Arctic Circle
            and north of the Antarctic Circle where the sun may not reach low
            enough below the horizon for this calculation, a null will be
            returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaKolEliyahu">
            <summary>
            From the GR"A in Kol Eliyahu on Berachos #173 that states that zman krias
            shema is calculated as half the time from <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise"> sea level sunrise</see>
            to fixed local chatzos. The GRA himself seems to contradict this when he stated that <em>zman krias shema</em>
            is 1/4 of the day from sunrise to sunset. See <em>Sarah Lamoed</em> #25 in Yisroel Vehazmanim Vol III page 1016
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema based on this calculation.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetFixedLocalChatzos"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA19Point8Degrees">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">19.8°</see> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">dawn</see> based on the opinion
            of the <em>MG"A</em> that the day is calculated from dawn to nightfall
            with both being 19.8° below sunrise or sunset. This returns the time
            of 4 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees"/> after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA16Point1Degrees">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">16.1°</see> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</see> based on the opinion
            of the <em>MG"A</em> that the day is calculated from dawn to nightfall
            with both being 16.1° below sunrise or sunset. This returns the time
            of 4 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/> after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA18Degrees" -->
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA72Minutes">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">72</see> minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes">shaos zmaniyos</see></em> (solar hours)
            after <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</see> based on the opinion of the <em>MG"A</em>
            that the day is calculated from a <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</see> of 72 minutes
            before sunrise to <see cref="M:Zmanim.ZmanimCalendar.GetTzais72">nightfall</see> of 72 minutes after
            sunset. This returns the time of 4 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/>
            after <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</see>. This class returns an identical time to
            <see cref="M:Zmanim.ZmanimCalendar.GetSofZmanTfilaMGA"/> and is repeated here for clarity.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman tfila.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetSofZmanShmaMGA"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA72MinutesZmanis">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to the morning
            prayers) in the opinion of the <em>MG"A</em> based on <em>alos</em> being
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">72</see> minutes <em>zmaniyos</em> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72MinutesZmanis">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</see> of 72 minutes <em>zmaniyos</em> before
            sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais72Zmanis">nightfall</see> of 72 minutes
            <em>zmaniyos</em> after sunset. This returns the time of 4 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72MinutesZmanis"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"> dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72MinutesZmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA90Minutes">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">90</seealso> minutes before
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso>. This time is 4
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes">shaos zmaniyos</seealso></em> (solar hours)
            after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">dawn</seealso> based on the opinion of the <em>MG"A</em>
            that the day is calculated from a <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">dawn</seealso> of 90 minutes
            before sunrise to <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais90">nightfall</seealso> of 90 minutes after
            sunset. This returns the time of 4 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes"/>
            after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman tfila.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA90MinutesZmanis">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to the morning
            prayers) in the opinion of the <em>MG"A</em> based on <em>alos</em> being
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">90</see> minutes <em>zmaniyos</em> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">dawn</see> of 90 minutes <em>zmaniyos</em> before
            sunrise to <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais90Zmanis">nightfall</seealso> of 90 minutes
            <em>zmaniyos</em> after sunset. This returns the time of 4 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis"> dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA96Minutes">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">96</see> minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes">shaos zmaniyos</see></em> (solar hours)
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">dawn</see> based on the opinion of the <em>MG"A</em>
            that the day is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">dawn</see> of 96 minutes
            before sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais96">nightfall</see> of 96 minutes after
            sunset. This returns the time of 4 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes"/>
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman tfila.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA96MinutesZmanis">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to the morning
            prayers) in the opinion of the <em>MG"A</em> based on <em>alos</em> being
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">96</see> minutes <em>zmaniyos</em> before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96MinutesZmanis">shaos zmaniyos</see></em> (solar
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">dawn</see> of 96 minutes <em>zmaniyos</em> before
            sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais96Zmanis">nightfall</see> of 96 minutes
            <em>zmaniyos</em> after sunset. This returns the time of 4 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96MinutesZmanis"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis"> dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA120Minutes">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">120</see> minutes before
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes">shaos zmaniyos</see></em> (solar hours)
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">dawn</see> based on the opinion of the
            <em>MG"A</em> that the day is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120"> dawn</see>
            of 120 minutes before sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais120">nightfall</see>
            of 120 minutes after sunset. This returns the time of 4 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis120Minutes"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfila2HoursBeforeChatzos">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) calculated as 2 hours befor
            <see cref="M:Zmanim.ZmanimCalendar.GetChatzos"/>. This is based on the opinions that
            calculate <em>sof zman krias shema</em> as
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShma3HoursBeforeChatzos"/>. This returns the time of 2
            hours before <seealso cref="M:Zmanim.ZmanimCalendar.GetChatzos"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetChatzos"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShma3HoursBeforeChatzos"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola30Minutes">
            <summary>
            This method returns mincha gedola calculated as 30 minutes after
            <em><see cref="M:Zmanim.ZmanimCalendar.GetChatzos">chatzos</see></em> and not 1/2 of a
            <em><see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra">shaah zmanis</see></em> after
            <em><see cref="M:Zmanim.ZmanimCalendar.GetChatzos">chatzos</see></em> as calculated by
            <see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>. Some use this time to delay the start of mincha
            in the winter when 1/2 of a
            <em><see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra">shaah zmanis</see></em> is less than 30
            minutes. See <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedolaGreaterThan30"/>for a conveniance
            method that returns the later of the 2 calculations. One should not use
            this time to start <em>mincha</em> before the standard
            <em><see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</see></em>. See <em>Shulchan Aruch
            Orach Chayim Siman Raish Lamed Gimel seif alef</em> and the
            <em>Shaar Hatziyon seif katan ches</em>.
            </summary>
            <returns>
            the <c>DateTime</c> of 30 mintes after <em>chatzos</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedolaGreaterThan30"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola72Minutes">
            <summary>
            This method returns the time of <em>mincha gedola</em> according to the
            Magen Avraham with the day starting 72 minutes before sunrise and ending
            72 minutes after sunset. This is the earliest time to pray
            <em>mincha</em>. For more information on this see the documentation on
            <em><see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</see></em>. This is calculated as
            6.5 <see cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour(System.DateTime,System.DateTime)">solar hours</see> after alos. The calculation
            used is 6.5 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/> after
            <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">alos</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha gedola.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola16Point1Degrees">
            <summary>
            This method returns the time of <em>mincha gedola</em> according to the
            Magen Avraham with the day starting and ending 16.1° below the
            horizon. This is the earliest time to pray <em>mincha</em>. For more
            information on this see the documentation on
            <em><see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</see></em>. This is calculated as
            6.5 <see cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour(System.DateTime,System.DateTime)">solar hours</see> after alos. The calculation
            used is 6.5 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/> after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha gedola.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedolaGreaterThan30">
            <summary>
            This is a conveniance methd that returns the later of
            <see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/> and <see cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola30Minutes"/>. In
            the winter when a <em><see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra">shaah zmanis</see></em> is
            less than 30 minutes <see cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola30Minutes"/> will be
            returned, otherwise <see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/> will be returned.
            </summary>
            <returns>
            the <c>DateTime</c> of the later of <see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            and <see cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola30Minutes"/>
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaKetana16Point1Degrees">
            <summary>
            This method returns the time of <em>mincha ketana</em> according to the
            Magen Avraham with the day starting and ending 16.1° below the
            horizon. This is the perfered earliest time to pray <em>mincha</em> in
            the opinion of the Ramba"m and others. For more information on this see
            the documentation on <em><seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</seealso></em>.
            This is calculated as 9.5 <seealso cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour(System.DateTime,System.DateTime)">solar hours</seealso> after
            alos. The calculation used is 9.5 *
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha ketana.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaKetana72Minutes">
            <summary>
            This method returns the time of <em>mincha ketana</em> according to the
            Magen Avraham with the day starting 72 minutes before sunrise and ending
            72 minutes after sunset. This is the perfered earliest time to pray
            <em>mincha</em> in the opinion of the Ramba"m and others. For more
            information on this see the documentation on
            <em><see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</see></em>. This is calculated as
            9.5 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/> after alos. The calculation used
            is 9.5 * <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/> after <see cref="M:Zmanim.ZmanimCalendar.GetAlos72"> alos</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha ketana.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha60Minutes">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos60">dawn</see>. The formula
            used is:<br/>
            10.75 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis60Minutes"/> after <seealso see="getAlos60()"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha72Minutes">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <see cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</see>. The formula
            used is:<br/>
            10.75 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/> after <see cref="M:Zmanim.ZmanimCalendar.GetAlos72"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha90Minutes">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90">dawn</seealso>. The formula
            used is:<br/>
            10.75 <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90Minutes"/> after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha96Minutes">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96">dawn</seealso>. The formula
            used is:<br/>
            10.75 <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96Minutes"/> after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha96MinutesZmanis">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">dawn</seealso>. The
            formula used is:<br/>
            10.75 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis96MinutesZmanis"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha90MinutesZmanis">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">dawn</seealso>. The
            formula used is:<br/>
            10.75 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis90MinutesZmanis"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha72MinutesZmanis">
            <summary>
            This method returns the time of <em>plag hamincha</em>. This is
            calculated as 10.75 hours after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</seealso>. The
            formula used is:<br/>
            10.75 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72MinutesZmanis"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha16Point1Degrees">
            <summary>
            This method returns the time of <em>plag hamincha</em> based on the
            opinion that the day starts at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</seealso></em> and ends at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais16Point1Degrees">tzais 16.1°</seealso></em>. This is
            calculated as 10.75 hours <em>zmaniyos</em> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</seealso>. The formula is<br/>
            10.75 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis16Point1Degrees"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha19Point8Degrees">
            <summary>
            This method returns the time of <em>plag hamincha</em> based on the
            opinion that the day starts at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">alos 19.8°</seealso></em> and ends at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais19Point8Degrees">tzais 19.8°</seealso></em>. This is
            calculated as 10.75 hours <em>zmaniyos</em> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees">dawn</seealso>. The formula is<br/>
            10.75 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis19Point8Degrees"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha26Degrees">
            <summary>
            This method returns the time of <em>plag hamincha</em> based on the
            opinion that the day starts at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees">alos 26°</seealso></em> and ends at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais26Degrees">tzais 26°</seealso></em>. This is calculated
            as 10.75 hours <em>zmaniyos</em> after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees">dawn</seealso>.
            The formula is<br/>
            10.75 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis26Degrees"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha18Degrees">
            <summary>
            This method returns the time of <em>plag hamincha</em> based on the
            opinion that the day starts at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos18Degrees">alos 18°</seealso></em> and ends at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais18Degrees">tzais 18°</seealso></em>. This is calculated
            as 10.75 hours <em>zmaniyos</em> after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos18Degrees">dawn</seealso>.
            The formula is<br/>
            10.75 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis18Degrees"/> after
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos18Degrees"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagAlosToSunset">
            <summary>
            This method returns the time of <em>plag hamincha</em> based on the
            opinion that the day starts at
            <em><seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</seealso></em> and ends at
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</seealso>. 10.75 shaos zmaniyos are calculated based on
            this day and added to <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos</seealso> to reach
            this time. This time is 10.75 <em>shaos zmaniyos</em> (temporal hours)
            after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</seealso> based on the opinion that
            the day is calculated from a <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</seealso> of
            16.1 degrees before sunrise to <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>
            . This returns the time of 10.75 * the calculated
            <em>shaah zmanis</em> after <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the plag.
            If the calculation can't be computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagAlos16Point1ToTzaisGeonim7Point083Degrees">
            <summary>
            This method returns the time of <em>plag hamincha</em> based on the
            opinion that the day starts at
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos 16.1°</see></em> and ends at
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees">tzais</see>. 10.75 shaos zmaniyos are
            calculated based on this day and added to
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">alos</see> to reach this time. This time is
            10.75 <em>shaos zmaniyos</em> (temporal hours) after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</see> based on the opinion that the day
            is calculated from a <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</see> of 16.1
            degrees before sunrise to <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees">tzais</see>
            . This returns the time of 10.75 * the calculated <em>shaah zmanis</em>
            after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the plag.
            If the calculation can't be computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetBainHasmashosRT13Point24Degrees">
            <summary>
            Method to return <em>Bain Hashmasho</em> of <em>Rabainu Tam</em> calculated when the sun is
            <seealso cref="!:ZENITH_13_POINT_24 13.24°"/> below the western <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric horizon</seealso> (90°;)
            after sunset. This calculation is based on the same calculation of <see cref="!:getBainHasmashosRT58Point5Minutes">
            Bain Hasmashos Rabainu Tam 58.5 minutes</see> but uses a degree based calculation instead of 58.5 exact minutes. This
            calculation is based on the position of the sun 58.5 minutes after sunset in Jerusalem during the equinox which
            calculates to 13.24°; below <seealso cref="!:AstronomicalCalendar.GEOMETRIC_ZENITH geometric zenith"/>.<br/>
            	<br/>
            NOTE: As per Yisroel Vehazmanim Vol III page 1028 No 50, a dip of slightly less than 13°; should be used.
            Calculations show that the proper dip to be 13.2456°; (truncated to 13.24 that provides about 1.5 second
            earlier (<em>lechumra</em>) time) below the horizon at that time. This makes a difference of 1 minute and 10
            seconds in Jerusalem during the Equinox, and 1 minute 29 seconds during the solstice as compared to the proper
            13.24°;. For NY during the solstice, the difference is 1 minute 56 seconds.
            </summary>
            <returns>
            the <c>DateTime</c> of the sun being 13.24° below
            <see cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see> (90°).
            If the calculation can't be computed such as northern and southern
            locations even south of the Arctic Circle and north of the
            Antarctic Circle where the sun may not reach low enough below the
            horizon for this calculation, a null will be returned. See
            detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
            documentation.
            </returns>
            <seealso cref="!:ZENITH_13_DEGREES"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetBainHasmashosRT58Point5Minutes">
            <summary>
            This method returns Bain Hashmashos of Rabainu Tam calculated as a 58.5
            minute offset after sunset. Bain hashmashos is 3/4 of a mil before tzais
            or 3 1/4 mil after sunset. With a mil calculated as 18 minutes, 3.25 * 18
            = 58.5 minutes.
            </summary>
            <returns>
            the <c>DateTime</c> of 58.5 minutes after sunset.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetBainHasmashosRT13Point5MinutesBefore7Point083Degrees">
            <summary>
            This method returns the time of <em>bain hashmashos</em> based on the
            calculation of 13.5 minutes (3/4 of an 18 minute mil before shkiah
            calculated as <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees">7.083°</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the bain hashmashos of Rabainu Tam in this calculation.
            If the calculation can't be computed such as
            northern and southern locations even south of the Arctic Circle
            and north of the Antarctic Circle where the sun may not reach low
            enough below the horizon for this calculation, a null will be
            returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetBainHasmashosRT2Stars">
            <summary>
            This method returns <em>bain hashmashos</em> of Rabainu Tam calculated in
            the opinion of the Divray Yosef (see Yisrael Vehazmanim) calculated
            5/18th (27.77%) of the time between alos (calculated as 19.8° before
            sunrise) and sunrise. This is added to sunset to arrive at the time for
            bain hashmashos of Rabainu Tam).
            </summary>
            <returns>
            the <c>DateTime</c> of bain hashmashos of Rabainu Tam for this calculation.
            If the calculation can't be computed such as
            northern and southern locations even south of the Arctic Circle
            and north of the Antarctic Circle where the sun may not reach low
            enough below the horizon for this calculation, a null will be
            returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim5Point95Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated at the sun's position at
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_5_POINT_95">5.95°</seealso> below the western horizon.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is 5.95° below sea level.
            If the calculation can't be computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_5_POINT_95"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim3Point65Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated calculated as 3/4 of a <a href="http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement">Mil</a> based on an 18 minute Mil, or 13.5 minutes. It is the sun's
            position at <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_3_POINT_65">3.65°</seealso> below the western
            horizon. This is a very early zman and should not be relied on without
            Rabbinical guidance.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is 3.65° below sea level.
            If the calculation can't be
            computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_3_POINT_65"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim3Point676Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4
            of a <a href= "http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement" >Mil</a> based on an 18
            minute Mil, or 13.5 minutes. It is the sun's position at <seealso cref="!:ZENITH_3_POINT_676 3.676°"/> below the western
            horizon based on the calculations of Stanley Fishkind. This is a very early <em>zman</em> and should not be
            relied on without Rabbinical guidance.
            </summary>
            <returns> the <code>DateTime</code> representing the time when the sun is 3.676°; below sea level. If the
                    calculation can't be computed such as northern and southern locations even south of the Arctic Circle and
                    north of the Antarctic Circle where the sun may not reach low enough below the horizon for this
                    calculation, a null will be returned. See detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/>
                    documentation. </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_3_POINT_676"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim4Point61Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated as 3/4 of a <a href="http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement">Mil</a> based on a 24 minute Mil, or 18 minutes. It is the sun's
            position at <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_61">4.61°</seealso> below the western
            horizon. This is a very early zman and should not be relied on without
            Rabbinical guidance.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is 4.61° below sea level.
            If the calculation can't be computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_61"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim4Point37Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated as 3/4 of a <a href="http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement">Mil</a>, based on a 22.5 minute Mil, or 16 7/8 minutes. It is the sun's
            position at <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_37">4.37°</seealso> below the western
            horizon. This is a very early zman and should not be relied on without
            Rabbinical guidance.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is 4.37° below sea level.
            If the calculation can't be computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_37"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim5Point88Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated as 3/4 of a <a href="http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement">Mil</a>. It is based on the Baal Hatanya based on a Mil being 24
            minutes, and is calculated as 18 +2 + 4 for a total of 24 minutes (FIXME:
            additional details needed). It is the sun's position at
            <see cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_5_POINT_88">5.88°</see> below the western horizon. This is a
            very early zman and should not be relied on without Rabbinical guidance.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is
            5.88° below sea level.
            If the calculation can't be
            computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_5_POINT_88"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim4Point8Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated as 3/4 of a <a href="http://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement">
            Mil</a>. It is the sun's position at <see cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_8">4.8°</see>
            below the western horizon based on Rabbi Leo Levi's calculations. (FIXME:
            additional documentation needed) This is the This is a very early zman
            and should not be relied on without Rabbinical guidance.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is 4.8° below sea level.
            If the calculation can't be
            computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_4_POINT_8"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim7Point083Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated at the sun's position at
            <see cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_7_POINT_083">7.083°</see> below the western horizon.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is 7.083° below sea level.
            If the calculation can't be
            computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ComplexZmanimCalendar.ZENITH_7_POINT_083"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim8Point5Degrees">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the <em>Geonim</em> calculated at the sun's position at
            <see cref="F:Zmanim.ZmanimCalendar.ZENITH_8_POINT_5">8.5°</see> below the western horizon.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time when the sun is 8.5° below sea level.
            If the calculation can't be computed
            such as northern and southern locations even south of the Arctic
            Circle and north of the Antarctic Circle where the sun may not
            reach low enough below the horizon for this calculation, a
            null will be returned. See detailed explanation on
            top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ZmanimCalendar.ZENITH_8_POINT_5"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais60">
            <summary>
            This method returns the <em>tzais</em> (nightfall) based on the opinion
            of the Chavas Yair and Divray Malkiel that the time to walk the distance
            of a Mil is 15 minutes for a total of 60 minutes for 4 mil after
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>.
            </summary>
            <returns>
            the <c>DateTime</c> representing 60 minutes after sea level sunset.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos60"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah">
            <summary>
            This method returns tzais usually calculated as 40 minutes after sunset.
            Please note that Chacham Yosef Harari-Raful of Yeshivat Ateret Torah who
            uses this time, does so only for calculating various other zmanai hayom
            such as Sof Zman Krias Shema and Plag Hamincha. His calendars do not
            publish a zman for Tzais. It should also be noted that Chacham
            Harari-Raful provided a 25 minute zman for Israel. This API uses 40
            minutes year round in any place on the globe by default. This offset can
            be changed by calling <see cref="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset"/>.
            </summary>
            <returns>
            the <c>DateTime</c> representing 40 minutes
            (setable via <see cref="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset"/>) after sea level sunset.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset"/>
        </member>
        <member name="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset">
            <summary>
            Gets or Sets the offset in minutes after sunset for the Ateret Torah
            zmanim. The default if unset is 40 minutes. Chacham Yosef Harari-Raful of
            Yeshivat Ateret Torah uses 40 minutes globally with the exception of
            Israel where a 25 minute offset is used. This 25 minute (or any other)
            offset can be overridden by this methd. This offset impacts all Ateret
            Torah methods.
            --
            Returns the offset in minutes after sunset used to calculate
            <em>tzais</em> for the Ateret Torah zmanim. The defaullt value is 40
            minutes.
            </summary>
            <value>the number of minutes after sunset to use as an offset for the
              Ateret Torah &lt;em&gt;tzais&lt;/em&gt;</value>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaAteretTorah">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) based on the calculation of Chacham Yosef
            Harari-Raful of Yeshivat Ateret Torah, that the day starts
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">1/10th of the day</see> before sunrise and is
            usually calculated as ending <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah">40 minutes after sunset</see>
            . <em>shaos zmaniyos</em> are calculated based on this day
            and added to <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">alos</see> to reach this time. This
            time is 3 <em>
            		<see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah">shaos zmaniyos</see></em>
            (temporal hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">alos 72 zmaniyos</see>.<br/>
            	<b>Note: </b> Based on this calculation <em>chatzos</em> will not be at
            midday.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema based on this
            calculation.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah"/>
            <seealso cref="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilahAteretTorah">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) based on the calculation of Chacham Yosef Harari-Raful
            of Yeshivat Ateret Torah, that the day starts <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"> 1/10th of the day</see>
            before sunrise and and is usually calculated as ending
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah">40 minutes after sunset</see>.
            <em>shaos zmaniyos</em> are calculated based on this day and added to
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">alos</see> to reach this time. This time is 4
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah">shaos zmaniyos</see></em> (temporal
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">alos 72 zmaniyos</see>.<br/>
            	<b>Note: </b> Based on this calculation <em>chatzos</em> will not be at
            midday.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema based on this
            calculation.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah"/>
            <seealso cref="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedolaAteretTorah">
            <summary>
            This method returns the time of <em>mincha gedola</em> based on the
            calculation of Chacham Yosef Harari-Raful of Yeshivat Ateret Torah, that
            the day starts <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">1/10th of the day</see> before
            sunrise and and is usually calculated as ending
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah">40 minutes after sunset</see>. This is the
            perfered earliest time to pray <em>mincha</em> in the opinion of the
            Ramba"m and others. For more information on this see the documentation on
            <em><see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</see></em>. This is calculated as
            6.5 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah">solar hours</see> after alos. The
            calculation used is 6.5 * <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah"/> after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">alos</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha gedola.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaKetanaAteretTorah"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetMinchaKetanaAteretTorah">
            <summary>
            This method returns the time of <em>mincha ketana</em> based on the
            calculation of Chacham Yosef Harari-Raful of Yeshivat Ateret Torah, that
            the day starts <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">1/10th of the day</see> before
            sunrise and and is usually calculated as ending
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah">40 minutes after sunset</see>. This is the
            perfered earliest time to pray <em>mincha</em> in the opinion of the
            Ramba"m and others. For more information on this see the documentation on
            <em><see cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</see></em>. This is calculated as
            9.5 <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah">solar hours</see> after
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">alos</see>. The calculation used is 9.5 *
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah"/> after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"> alos</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha ketana.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetPlagHaminchaAteretTorah">
            <summary>
            This method returns the time of <em>plag hamincha</em> based on the
            calculation of Chacham Yosef Harari-Raful of Yeshivat Ateret Torah, that
            the day starts <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">1/10th of the day</see> before
            sunrise and and is usually calculated as ending
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah">40 minutes after sunset</see>.
            <em>shaos zmaniyos</em> are calculated based on this day and added to
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">alos</see> to reach this time. This time is 10.75
            <em><see cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah">shaos zmaniyos</see></em> (temporal
            hours) after <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis">dawn</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the plag.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzaisAteretTorah"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanisAteretTorah"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais72Zmanis">
            <summary>
            Method to return <em>tzais</em> (dusk) calculated as 72 minutes zmaniyos,
            or 1/10th of the day after <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos72Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais90Zmanis">
            <summary>
            Method to return <em>tzais</em> (dusk) calculated using 90 minutes
            zmaniyos (<em>GR"A</em> and the <em>Baal Hatanya</em>) after
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais96Zmanis">
            <summary>
            Method to return <em>tzais</em> (dusk) calculated using 96 minutes
            zmaniyos (<em>GR"A</em> and the <em>Baal Hatanya</em>) after
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais90">
            <summary>
            Method to return <em>tzais</em> (dusk) calculated as 90 minutes after sea
            level sunset. This method returns <em>tzais</em> (nightfall) based on the
            opinion of the Magen Avraham that the time to walk the distance of a Mil
            in the Ramba"m's opinion is 18 minutes for a total of 90 minutes based on
            the opinion of <em>Ula</em> who calculated <em>tzais</em> as 5 Mil after
            sea level shkiah (sunset). A similar calculation
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais19Point8Degrees"/>uses solar position calculations based
            on this time.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais19Point8Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos90"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais120">
            <summary>
            This method returns <em>tzais</em> (nightfall) based on the opinion of
            the Magen Avraham that the time to walk the distance of a Mil in the
            Ramba"ms opinion is 2/5 of an hour (24 minutes) for a total of 120
            minutes based on the opinion of <em>Ula</em> who calculated
            <em>tzais</em> as 5 Mil after sea level shkiah (sunset). A similar
            calculation <see cref="M:Zmanim.ComplexZmanimCalendar.GetTzais26Degrees"/> uses temporal calculations based
            on this time.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais26Degrees"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais120Zmanis">
            <summary>
            Method to return <em>tzais</em> (dusk) calculated using 120 minutes
            zmaniyos (<em>GR"A</em> and the <em>Baal Hatanya</em>) after
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos120Zmanis"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais16Point1Degrees">
            <summary>
            For information on how this is calculated see the comments on
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees"/>
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation
            can't be computed such as northern and southern locations even
            south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this
            calculation, a null will be returned. See detailed explanation on
            top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetTzais72"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees">for more information on this calculation.</seealso>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais26Degrees">
            <summary>
            For information on how this is calculated see the comments on
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees"/>
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be
            computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais120"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos26Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais18Degrees">
            <summary>
            For information on how this is calculated see the comments on
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos18Degrees"/>
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation
            can't be computed such as northern and southern locations even
            south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this
            calculation, a null will be returned. See detailed explanation on
            top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos18Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais19Point8Degrees">
            <summary>
            For information on how this is calculated see the comments on
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees"/>
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be
            computed such as northern and southern locations even south of
            the Arctic Circle and north of the Antarctic Circle where the sun
            may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais90"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos19Point8Degrees"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetTzais96">
            <summary>
            A method to return <em>tzais</em> (dusk) calculated as 96 minutes after
            sea level sunset. For information on how this is calculated see the
            comments on <see cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96"/>.
            </summary>
            <returns>
            the <c>DateTime</c> representing the time.
            If the calculation can't be computed such as in the Arctic Circle
            where there is at least one day a year where the sun does not
            rise, and one where it does not set, a null will be returned. See
            detailed explanation on top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos96"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetFixedLocalChatzos">
            <summary>
            A method that returns the local time for fixed <em>chatzos</em>. This
            time is noon and midnight adjusted from standard time to account for the
            local latitude. The 360° of the globe divided by 24 calculates to
            15° per hour with 4 minutes per degree, so at a longitude of 0 , 15,
            30 etc Chatzos in 12:00 noon. Lakewood, NJ whose longitude is -74.2094 is
            0.7906 away from the closest multiple of 15 at -75°. This is
            multiplied by 4 to yeild 3 minutes and 10 seconds for a chatzos of
            11:56:50. This method is not tied to the theoretical 15° timezones,
            but will adjust to the actual timezone and <a href="http://en.wikipedia.org/wiki/Daylight_saving_time">Daylight saving
            time</a>.
            </summary>
            <returns>
            the DateTime representing the local <em>chatzos</em>
            </returns>
            <seealso cref="M:Zmanim.Utilities.GeoLocation.GetLocalMeanTimeOffset(System.DateTime)"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaFixedLocal">
            <summary>
            A method that returns the latest <em>zman krias shema</em> (time to say
            Shema in the morning) calculated as 3 hours before
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetFixedLocalChatzos"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman shema.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetFixedLocalChatzos"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaFixedLocal"/>
        </member>
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaFixedLocal">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) calculated as 2 hours before
            <see cref="M:Zmanim.ComplexZmanimCalendar.GetFixedLocalChatzos"/>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman tfila.
            </returns>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetFixedLocalChatzos"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaFixedLocal"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.ComplexZmanimCalendar.getSofZmanAchilasChametzGRA" -->
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanAchilasChametzMGA72Minutes">
            <summary>
            This method returns the latest time one is allowed eating chametz on Erev Pesach according to the opinion of the
            <em>MGA</em> based on <em>alos</em> being <seealso cref="!:GetAlos72() 72"/> minutes before <seealso cref="!:GetSunrise() sunrise"/>.
            This time is identical to the <seealso cref="!:GetSofZmanTfilaMGA72Minutes() Sof zman tefilah MGA 72 minutes"/>. This time
            is 4 <em><seealso cref="!:GetShaahZmanisMGA() shaos zmaniyos"/></em> (temporal hours) after <seealso cref="!:GetAlos72() dawn"/> based
            on the opinion of the <em>MGA</em> that the day is calculated from a <seealso cref="!:GetAlos72() dawn"/> of 72 minutes
            before sunrise to <seealso cref="!:GetTzais72() nightfall"/> of 72 minutes after sunset. This returns the time of 4 *
            <seealso cref="!:GetShaahZmanisMGA()"/> after <seealso cref="!:GetAlos72() dawn"/>.
            </summary>
            <returns> the <code>Date</code> of the latest time of eating chametz. If the calculation can't be computed such as
                    in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it
                    does not set), a null will be returned. See detailed explanation on top of the
                    <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
            <seealso cref="!:GetShaahZmanisMGA"></seealso>
            <seealso cref="!:GetAlos72"></seealso>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA72Minutes"></seealso>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.ComplexZmanimCalendar.GetSofZmanAchilasChametzMGA16Point1Degrees" -->
        <!-- Badly formed XML comment ignored for member "M:Zmanim.ComplexZmanimCalendar.GetSofZmanBiurChametzGRA" -->
        <member name="M:Zmanim.ComplexZmanimCalendar.GetSofZmanBiurChametzMGA72Minutes">
            <summary>
            This method returns the latest time for burning chametz on Erev Pesach according to the opinion of the
            <em>MGA</em> based on <em>alos</em> being <seealso cref="!:GetAlos72() 72"/> minutes before <seealso cref="!:GetSunrise() sunrise"/>.
            This time is 5 <em><seealso cref="!:GetShaahZmanisMGA() shaos zmaniyos"/></em> (temporal hours) after {@link #getAlos72()
            dawn} based on the opinion of the <em>MGA</em> that the day is calculated from a <seealso cref="!:GetAlos72() dawn"/> of 72
            minutes before sunrise to <seealso cref="!:GetTzais72() nightfall"/> of 72 minutes after sunset. This returns the time of 5
            * <seealso cref="!:GetShaahZmanisMGA"/> after <seealso cref="!:GetAlos72() dawn"/>.
            </summary>
            <returns> the <code>Date</code> of the latest time for burning chametz on Erev Pesach. If the calculation can't be
                    computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,
                    and one where it does not set), a null will be returned. See detailed explanation on top of the
                    <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
            <seealso cref="!:GetShaahZmanisMGA"></seealso>
            <seealso cref="!:GetAlos72()"></seealso>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.ComplexZmanimCalendar.GetSofZmanBiurChametzMGA16Point1Degrees" -->
        <member name="M:Zmanim.ComplexZmanimCalendar.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_19_DEGREES">
            Below are Methods added to kosherjava and not yet ported to NET            
        </member>
        <member name="T:Zmanim.Extensions.DateExtensions">
            <summary>
            DateTime extensions.
            </summary>
        </member>
        <member name="M:Zmanim.Extensions.DateExtensions.ToDateTime(System.Int64)">
            <summary>
            Converts Unix Epoch Milliseconds to DateTime.
            </summary>
            <param name="unixEpochMilliseconds">Milliseconds from the Unix Epoch.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.Extensions.DateExtensions.ToUnixEpochMilliseconds(System.DateTime)">
            <summary>
            Converts a DateTime to Unix Epoch Milliseconds.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="T:Zmanim.Extensions.MathExtensions">
            <summary>
            Math helpers.
            </summary>
        </member>
        <member name="M:Zmanim.Extensions.MathExtensions.ToRadians(System.Double)">
            <summary>
            Convert degree angle to radians.
            </summary>
            <param name="angleDegree">The angle degree.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.Extensions.MathExtensions.ToDegree(System.Double)">
            <summary>
            Convert radian angle to degrees.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns></returns>
        </member>
        <member name="T:Zmanim.IAstronomicalCalendar">
            <summary>
             A calendar that calculates astronomical time calculations such as
              <see cref = "M:Zmanim.IAstronomicalCalendar.GetSunrise">sunrise</see> and <see cref = "M:Zmanim.IAstronomicalCalendar.GetSunset">sunset</see> times.
            </summary>
        </member>
        <member name="M:Zmanim.IAstronomicalCalendar.GetSunrise">
            <summary>
              The getSunrise method Returns a <c>DateTime</c> representing the
              sunrise time. The zenith used for the calculation uses
              <seealso cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso> of 90°. This is adjusted
              by the <seealso cref = "P:Zmanim.AstronomicalCalendar.AstronomicalCalculator" /> that adds approximately 50/60 of a
              degree to account for 34 archminutes of refraction and 16 archminutes for
              the sun's radius for a total of
              <seealso cref = "M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">90.83333°</seealso>. See
              documentation for the specific implementation of the
              <seealso cref = "P:Zmanim.AstronomicalCalendar.AstronomicalCalculator" /> that you are using.
            </summary>
            <returns> the <c>DateTime</c> representing the exact sunrise time. If
              the calculation can not be computed null will be returned. </returns>
            <seealso cref = "M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)" />
        </member>
        <member name="M:Zmanim.IAstronomicalCalendar.GetSunset">
            <summary>
              The getSunset method Returns a <c>DateTime</c> representing the
              sunset time. The zenith used for the calculation uses
              <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see> of 90°. This is adjusted
              by the <see cref = "P:Zmanim.AstronomicalCalendar.AstronomicalCalculator" /> that adds approximately 50/60 of a
              degree to account for 34 archminutes of refraction and 16 archminutes for
              the sun's radius for a total of
              <see cref = "M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">90.83333°</see>. See
              documentation for the specific implementation of the
              <see cref = "T:Zmanim.Calculator.AstronomicalCalculator" /> that you are using. Note: In certain cases
              the calculates sunset will occur before sunrise. This will typically
              happen when a timezone other than the local timezone is used (calculating
              Los Angeles sunset using a GMT timezone for example). In this case the
              sunset date will be incremented to the following date.
            </summary>
            <returns> the <c>DateTime</c> representing the exact sunset time. If
              the calculation can not be computed null will be returned. If the
              time calculation </returns>
            <seealso cref = "M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)" />
        </member>
        <member name="P:Zmanim.IAstronomicalCalendar.AstronomicalCalculator">
            <summary>
            Gets or Sets the current AstronomicalCalculator set.
            </summary>
            <value>Returns the astronimicalCalculator.</value>
        </member>
        <member name="P:Zmanim.IAstronomicalCalendar.DateWithLocation">
            <summary>
            Gets or Sets the calender to be used in the calculations.
            </summary>
            <value>The calendar to set.</value>
        </member>
        <member name="T:Zmanim.IDateWithLocation">
            <summary>
            The GeoLocation and DateTime.
            </summary>
        </member>
        <member name="P:Zmanim.IDateWithLocation.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Zmanim.IDateWithLocation.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:Zmanim.DateWithLocation">
            <summary>
            A simple implementation of ITimeZoneDateTime.
            </summary>
        </member>
        <member name="M:Zmanim.DateWithLocation.#ctor(System.DateTime,Zmanim.Utilities.IGeoLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.DateWithLocation"/> class.
            </summary>
            <param name="date">The date.</param>
            <param name="location"></param>
        </member>
        <member name="P:Zmanim.DateWithLocation.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Zmanim.DateWithLocation.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Zmanim.JewishCalendar.Daf" -->
        <member name="M:Zmanim.JewishCalendar.Daf.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor that creates a Daf setting the <seealso cref="!:#setMasechtaNumber(int) masechta Number"/> and
            </summary>
            <param name="masechtaNumber"> </param>
            <param name="page"> </param>
            <param name="hasSecondaryMesechta"></param>
        </member>
        <member name="P:Zmanim.JewishCalendar.Daf.MasechtaNumber">
            <returns> the masechtaNumber </returns>
        </member>
        <member name="P:Zmanim.JewishCalendar.Daf.Page">
            <summary>
            Returns the daf (page number) of the Daf Yomi </summary>
            <returns> the daf (page number) of the Daf Yomi </returns>
        </member>
        <member name="P:Zmanim.JewishCalendar.Daf.MasechtaTransliterated">
            <summary>
            Returns the transliterated name of the masechta (tractate) of the Daf Yomi. The list of mashechtos is: Berachos,
            Shabbos, Eruvin, Pesachim, Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan, Chagigah,
            Yevamos, Kesubos, Nedarim, Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin,
            Makkos, Shevuos, Avodah Zarah, Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah,
            Kinnim, Tamid, Midos and Niddah.
            </summary>
            <returns> the transliterated name of the masechta (tractate) of the Daf Yomi such as Berachos. </returns>
        </member>
        <member name="P:Zmanim.JewishCalendar.Daf.SecondaryMasechtaTransliterated">
            <summary>
            Returns the transliterated name of the second masechta (tractate) of the Daf Yomi.
            Kinnim, Tamid.
            </summary>
            <returns> the transliterated name of the second masechta (tractate) of the Daf Yomi
            when on the first Daf of Kinnim or Tamid. </returns>
        </member>
        <member name="P:Zmanim.JewishCalendar.Daf.Masechta">
            <summary>
            Returns the masechta (tractate) of the Daf Yomi in Hebrew, It will return
            &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.
            </summary>
            <returns> the masechta (tractate) of the Daf Yomi in Hebrew, It will return
                    &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos. </returns>
        </member>
        <member name="P:Zmanim.JewishCalendar.Daf.SecondaryMasechta">
            <summary>
            Returns the secondary masechta (tractate) of the Daf Yomi in Hebrew, It will only return
            For Kinnim and Tamid when on the first Daf \u05E7\u05D9\u05E0\u05D9\u05DD for Tamid.
            </summary>
            <returns> the secondary masechta (tractate) of the Daf Yomi in Hebrew, It will only return
            For Kinnim and Tamid when on the first Daf \u05E7\u05D9\u05E0\u05D9\u05DD for Tamid.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Zmanim.JewishCalendar.HebrewDateFormatter" -->
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.LongWeekFormat">
            <summary>
            returns if the <seealso cref="!:#formatDayOfWeek(JewishDate)"/> will use the long format such as
            &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; or short such as &#x05D0; when formatting the day of week in
            <seealso cref="!:isHebrewFormat() Hebrew"/>.
            </summary>
            <returns> the longWeekFormat </returns>
            <seealso cref="!:setLongWeekFormat(boolean)"></seealso>
            <seealso cref="!:formatDayOfWeek(JewishDate)"></seealso>
        </member>
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.TransliteratedShabbosDayOfWeek">
            <summary>
            Returns the day of Shabbos transliterated into Latin chars. The default uses Ashkenazi pronounciation "Shabbos".
            This can be overwritten using the <seealso cref="!:#setTransliteratedShabbosDayOfWeek(String)"/>
            </summary>
            <returns> the transliteratedShabbos. The default list of months uses Ashkenazi pronounciation "Shabbos". </returns>
            <seealso cref="!:setTransliteratedShabbosDayOfWeek(String)"></seealso>
            <seealso cref="!:formatDayOfWeek(JewishDate)"></seealso>
        </member>
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.TransliteratedHolidayList">
            <summary>
            Returns the list of holidays transliterated into Latin chars. This is used by the
            <seealso cref="!:#formatYomTov(JewishCalendar)"/> when formatting the Yom Tov String. The default list of months uses
            Ashkenazi pronunciation in typical American English spelling.
            </summary>
            <returns> the list of holidays "Adar", "Adar II", "Adar I". The default list is currently "Erev Pesach", "Pesach",
                    "Chol Hamoed Pesach", "Pesach Sheni", "Erev Shavuos", "Shavuos", "Seventeenth of Tammuz", "Tishah B'Av",
                    "Tu B'Av", "Erev Rosh Hashana", "Rosh Hashana", "Fast of Gedalyah", "Erev Yom Kippur", "Yom Kippur",
                    "Erev Succos", "Succos", "Chol Hamoed Succos", "Hoshana Rabbah", "Shemini Atzeres", "Simchas Torah",
                    "Erev Chanukah", "Chanukah", "Tenth of Teves", "Tu B'Shvat", "Fast of Esther", "Purim", "Shushan Purim",
                    "Purim Katan", "Rosh Chodesh", "Yom HaShoah", "Yom Hazikaron", "Yom Ha'atzmaut", "Yom Yerushalayim"
            </returns>
            <seealso cref="!:#setTransliteratedMonthList(String[])"> </seealso>
            <seealso cref="!:#formatYomTov(JewishCalendar)"> </seealso>
            <seealso cref="!:#isHebrewFormat()"> </seealso>
        </member>
        <member name="F:Zmanim.JewishCalendar.HebrewDateFormatter.hebrewHolidays">
            <summary>
            Hebrew holiday list
            </summary>
        </member>
        <member name="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatYomTov(System.DateTime,System.Boolean)">
            <summary>
            Formats the Yom Tov (holiday) in Hebrew or transliterated Latin characters.
            </summary>
            <param name="jewishCalendar"> </param>
            <returns> the formatted holiday or an empty String if the day is not a holiday. </returns>
            <seealso cref="!:isHebrewFormat()"></seealso>
        </member>
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.HebrewFormat">
            <summary>
            Returns if the formatter is set to use Hebrew formatting in the various formatting methods.
            </summary>
            <returns> the hebrewFormat </returns>
            <seealso cref="!:SetHebrewFormat(bool)"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.Format(System.DateTime)"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatDayOfWeek(System.DateTime)"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatMonth(System.DateTime)"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatOmer(System.DateTime)"></seealso>
            <seealso cref="!:formatParsha(JewishCalendar)"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatYomTov(System.DateTime,System.Boolean)"></seealso>
        </member>
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.HebrewOmerPrefix">
            <summary>
            Returns the Hebrew Omer prefix. By default it is the letter &#x5D1;, but can be set to &#x5DC; (or any other
            prefix) using the <seealso cref="!:#setHebrewOmerPrefix(String)"/>.
            </summary>
            <returns> the hebrewOmerPrefix
            </returns>
            <seealso cref="!:SetHebrewOmerPrefix(String)"> </seealso>
            <seealso cref="!:FormatOmer(JewishCalendar)"> </seealso>
        </member>
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.TransliteratedMonthList">
            <summary>
            Returns the list of months transliterated into Latin chars. The default list of months uses Ashkenazi
            pronunciation in typical American English spelling. This list has a length of 14 with 3 variations for Adar -
            "Adar", "Adar II", "Adar I"
            </summary>
            <returns> the list of months beginning in Nissan and ending in in "Adar", "Adar II", "Adar I". The default list is
                    currently "Nissan", "Iyar", "Sivan", "Tammuz", "Av", "Elul", "Tishrei", "Cheshvan", "Kislev", "Teves",
                    "Shevat", "Adar", "Adar II", "Adar I" </returns>
            <seealso cref="!:setTransliteratedMonthList(String[])"></seealso>
        </member>
        <member name="F:Zmanim.JewishCalendar.HebrewDateFormatter.hebrewMonths">
            <summary>
            Unicode list of Hebrew months.
            </summary>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatMonth(System.DateTime)"></seealso>
        </member>
        <member name="F:Zmanim.JewishCalendar.HebrewDateFormatter.transliteratedParshios">
            <summary>
            list of transliterated parshiyos using the default Ashkenazi pronounciation. The formatParsha method uses this
            for transliterated parsha display. This list can be overridden (for Sephardi English transliteration for example)
            by setting the <seealso cref="!:#setTransliteratedParshiosList(String[])"/>.
            </summary>
            <seealso cref="!:FXAssemblyormatParsha(JewishCalendar)"></seealso>
        </member>
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.TransliteratedParshiosList">
            <summary>
            Retruns the list of transliterated parshiyos used by this formatter.
            </summary>
            <returns> the list of transliterated Parshios </returns>
        </member>
        <member name="F:Zmanim.JewishCalendar.HebrewDateFormatter.hebrewParshiyos">
            <summary>
            Unicode list of Hebrew parshiyos.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.HebrewDateFormatter.hebrewDaysOfWeek">
            <summary>
            Unicode list of Hebrew days of week.
            </summary>
        </member>
        <member name="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatDayOfWeek(System.DateTime)">
            <summary>
            Formats the day of week. If <seealso cref="!:#isHebrewFormat() Hebrew formatting"/> is set, it will display in the format
            &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; etc. If Hebrew formatting is not in use it will return it in the format
            of Sunday etc. There are various formatting options that will affect the output.
            </summary>
            <param name="jewishDate"> </param>
            <returns> the formatted day of week </returns>
            <seealso cref="!:isHebrewFormat()"></seealso>
            <seealso cref="!:isLongWeekFormat()"></seealso>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Zmanim.JewishCalendar.HebrewDateFormatter.UseGershGershayim" -->
        <member name="P:Zmanim.JewishCalendar.HebrewDateFormatter.UseLongHebrewYears">
            <summary>
            Returns whether the class is set to use the thousands digit when formatting. When formatting a Hebrew Year,
            traditionally the thousands digit is omitted and output for a year such as 5729 (1969 Gregorian) would be
            calculated for 729 and format as &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;. When set to true the long format year such
            as &#x5D4;&#x5F3; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8; for 5729/1969 is returned.
            </summary>
            <returns> true if set to use the the thousands digit when formatting Hebrew dates and numbers. </returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.HebrewDateFormatter.Format(System.DateTime)">
            <summary>
            Formats the Jewish date. If the formatter is set to Hebrew, it will format in the form, "day Month year" for
            example &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;, and the format
            "21 Shevat, 5729" if not.
            </summary>
            <param name="jewishDate">
                       the JewishDate to be formatted </param>
            <returns> the formatted date. If the formatter is set to Hebrew, it will format in the form, "day Month year" for
                    example &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;, and the format
                    "21 Shevat, 5729" if not. </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatMonth(System.DateTime)" -->
        <member name="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatOmer(System.DateTime)">
            <summary>
            Returns a String of the Omer day in the form &#x5DC;&#x5F4;&#x5D2; &#x5D1;&#x05E2;&#x05D5;&#x05DE;&#x5E8; if
            Hebrew Format is set, or "Omer X" or "Lag BaOmer" if not. An empty string if there is no Omer this day.
            </summary>
            <returns> a String of the Omer day in the form or an empty string if there is no Omer this day. The default
                    formatting has a &#x5D1;&#x5F3; prefix that would output &#x5D1;&#x05E2;&#x05D5;&#x05DE;&#x5E8;, but this
                    can be set via the <seealso cref="!:#setHebrewOmerPrefix(String)"/> method to use a &#x5DC; and output
                    &#x5DC;&#x5F4;&#x5D2; &#x5DC;&#x05E2;&#x05D5;&#x05DE;&#x5E8;. </returns>
            <seealso cref="!:isHebrewFormat()"></seealso>
            <seealso cref="!:getHebrewOmerPrefix()"></seealso>
            <seealso cref="!:setHebrewOmerPrefix(String)"></seealso>
        </member>
        <member name="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatMolad(System.Int64)">
            <summary>
            Experimental and incomplete
            </summary>
            <param name="moladChalakim"> </param>
            <returns> the formatted molad. FIXME: define proper format in English and Hebrew. </returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.HebrewDateFormatter.GetFormattedKviah(System.Int32)">
            <summary>
            Returns the kviah in the traditional 3 letter Hebrew format where the first letter represents the day of week of
            Rosh Hashana, the second letter represents the lengths of Cheshvan and Kislev ({@link JewishDate#SHELAIMIM
            Shelaimim} , <seealso cref="!:JewishDate#KESIDRAN Kesidran"/> or <seealso cref="!:JewishDate#CHASERIM Chaserim"/>) and the 3rd letter
            represents the day of week of Pesach. For example 5729 (1969) would return &#x5D1;&#x5E9;&#x5D4; (Rosh Hashana on
            Monday, Shelaimim, and Pesach on Thursday), while 5771 (2011) would return &#x5D4;&#x5E9;&#x5D2; (Rosh Hashana on
            Thursday, Shelaimim, and Pesach on Tuesday).
            </summary>
            <param name="jewishYear">
                       the Jewish year </param>
            <returns> the Hebrew String such as &#x5D1;&#x5E9;&#x5D4; for 5729 (1969) and &#x5D4;&#x5E9;&#x5D2; for 5771
                    (2011). </returns>
            
            
        </member>
        <member name="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatDafYomiBavli(Zmanim.JewishCalendar.Daf)">
            <summary>
            Format the daf to the mesechta and the daf
            </summary>
            <param name="daf"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatHebrewNumber(System.Int32)" -->
        <member name="T:Zmanim.JewishCalendar.JewishCalendar">
            <summary>
            Jewish calendar. Extends HebrewCalendar to provide things like Jewish info (holidays etc.) and jewish months
            </summary>
        </member>
        <member name="T:Zmanim.JewishCalendar.JewishCalendar.JewishMonth">
            <summary>
            Normalizes the months as 1-13 (1-12, with 13 being adar bet)
            This is different than the native HebrewCalendar month index 
            which changes the index of several months depending on whether or not it is a leap year
            see: https://msdn.microsoft.com/en-us/library/system.globalization.hebrewcalendar(v=vs.110).aspx
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.NONE">
            <summary>
            To represent "no month"
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.NISSAN">
            <summary>
            Value of the month field indicating Nissan, the first numeric month of the year in the Jewish calendar. With the
            year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 7th (or 8th in a {@link #IsLeapYearFromDateTime leap
            year}) month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.IYAR">
            <summary>
            Value of the month field indicating Iyar, the second numeric month of the year in the Jewish calendar. With the
            year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 8th (or 9th in a {@link #IsLeapYearFromDateTime leap
            year}) month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.SIVAN">
            <summary>
            Value of the month field indicating Sivan, the third numeric month of the year in the Jewish calendar. With the
            year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 9th (or 10th in a {@link #IsLeapYearFromDateTime leap
            year}) month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TAMMUZ">
            <summary>
            Value of the month field indicating Tammuz, the fourth numeric month of the year in the Jewish calendar. With the
            year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 10th (or 11th in a {@link #IsLeapYearFromDateTime leap
            year}) month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.AV">
            <summary>
            Value of the month field indicating Av, the fifth numeric month of the year in the Jewish calendar. With the year
            starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 11th (or 12th in a <seealso cref="M:Zmanim.JewishCalendar.JewishCalendar.IsLeapYearFromDateTime(System.DateTime)"/>)
            month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.ELUL">
            <summary>
            Value of the month field indicating Elul, the sixth numeric month of the year in the Jewish calendar. With the
            year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 12th (or 13th in a {@link #IsLeapYearFromDateTime leap
            year}) month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI">
            <summary>
            Value of the month field indicating Tishrei, the seventh numeric month of the year in the Jewish calendar. With
            the year starting at this month, it would actually be the 1st month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.CHESHVAN">
            <summary>
            Value of the month field indicating Cheshvan/marcheshvan, the eighth numeric month of the year in the Jewish
            calendar. With the year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 2nd month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.KISLEV">
            <summary>
            Value of the month field indicating Kislev, the ninth numeric month of the year in the Jewish calendar. With the
            year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 3rd month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TEVES">
            <summary>
            Value of the month field indicating Teves, the tenth numeric month of the year in the Jewish calendar. With the
            year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 4th month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.SHEVAT">
            <summary>
            Value of the month field indicating Shevat, the eleventh numeric month of the year in the Jewish calendar. With
            the year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 5th month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.ADAR">
            <summary>
            Value of the month field indicating Adar (or Adar I in a <seealso cref="M:Zmanim.JewishCalendar.JewishCalendar.IsLeapYearFromDateTime(System.DateTime)"/>), the twelfth
            numeric month of the year in the Jewish calendar. With the year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually
            be the 6th month of the year.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.ADAR_II">
            <summary>
            Value of the month field indicating Adar II, the leap (intercalary or embolismic) thirteenth (Undecimber) numeric
            month of the year added in Jewish <seealso cref="M:Zmanim.JewishCalendar.JewishCalendar.IsLeapYearFromDateTime(System.DateTime)"/>). The leap years are years 3, 6, 8, 11,
            14, 17 and 19 of a 19 year cycle. With the year starting at <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.JewishMonth.TISHREI"/>, it would actually be the 7th month
            of the year.
            </summary>
        </member>
        <member name="T:Zmanim.JewishCalendar.JewishCalendar.JewishHoliday">
            <summary>
            Jewish holiday.
            </summary>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishYearType.CHASERIM">
            <summary>
            A short year where both <seealso cref="!:CHESHVAN"/> and <seealso cref="!:KISLEV"/> are 29 days.
            </summary>
            <seealso cref="!:GetCheshvanKislevKviah()"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.GetFormattedKviah(System.Int32)"></seealso>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishYearType.KESIDRAN">
            <summary>
            An ordered year where <seealso cref="!:CHESHVAN"/> is 29 days and <seealso cref="!:KISLEV"/> is 30 days.
            </summary>
            <seealso cref="!:GetCheshvanKislevKviah()"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.GetFormattedKviah(System.Int32)"></seealso>
        </member>
        <member name="F:Zmanim.JewishCalendar.JewishCalendar.JewishYearType.SHELAIMIM">
            <summary>
            A long year where both <seealso cref="!:CHESHVAN"/> and <seealso cref="!:KISLEV"/> are 30 days.
            </summary>
            <seealso cref="!:HebrewDateFormatter.v()"></seealso>
            <seealso cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.GetFormattedKviah(System.Int32)"></seealso>
        </member>
        <member name="T:Zmanim.JewishCalendar.JewishCalendar.Parsha">
            <summary>
            Parshiyos 
            </summary>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.NativeMonthToJewishMonth(System.Int32,System.Boolean)">
            <summary>
            Natives the month to jewish month.
            see https://msdn.microsoft.com/en-us/library/system.globalization.hebrewcalendar(v=vs.110).aspx
            </summary>
            <returns>The month to jewish month.</returns>
            <param name="nativeMonth">Native month.</param>
            <param name="leapYear">If set to <c>true</c> leap year.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.JewishMonthToNativeMonth(Zmanim.JewishCalendar.JewishCalendar.JewishMonth,System.Boolean)">
            <summary>
            Jewishs the month to native month.
            see https://msdn.microsoft.com/en-us/library/system.globalization.hebrewcalendar(v=vs.110).aspx
            </summary>
            <returns>The month to native month.</returns>
            <param name="jewishMonth">Jewish month.</param>
            <param name="leapYear">If set to <c>true</c> leap year.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetDafYomiBavli(System.DateTime)">
            <summary>
            Returns the Daf Yomi (Bavli) for the date that the calendar is set to. See the
            <see cref="M:Zmanim.JewishCalendar.HebrewDateFormatter.FormatDafYomiBavli(Zmanim.JewishCalendar.Daf)"/> for the ability to format the daf in Hebrew or transliterated
            masechta names.
            </summary>
            <returns>the daf as a <see cref="T:Zmanim.JewishCalendar.Daf"/></returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetJewishDayOfWeek(System.DateTime)">
            <summary>
            Get the Day of week where 1 is Sunday ... and 7 is Shabbos
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsLeapYear(System.Int32)">
            <summary>
            Determines whether this instance is leap year from date time the specified dt.
            </summary>
            <returns><c>true</c> if this instance is leap year from date time the specified dt; otherwise, <c>false</c>.</returns>
            <param name="year">Jewish Year</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsYomTovAssurBemelacha(Zmanim.JewishCalendar.JewishCalendar.JewishHoliday)">
            <summary>
            This method will return false for a non Yom Tov day, even if it is Shabbos.
            </summary>
            <returns>if the Yom Tov day has a melacha (work)  prohibition.</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsCholHamoed(Zmanim.JewishCalendar.JewishCalendar.JewishHoliday)">
            <summary>
            Returns true if the current day is Chol Hamoed of Pesach or Succos.
            </summary>
            <returns>true if the current day is Chol Hamoed of Pesach or Succos</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetDayOfOmer(Zmanim.JewishCalendar.JewishCalendar.JewishMonth,System.Int32)">
            <summary>
            Returns the int value of the Omer day or -1 if the day is not in the omer
            </summary>
            <returns>The Omer count as an int or -1 if it is not a day of the Omer.</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsLeapYearFromDateTime(System.DateTime)">
            <summary>
            Determines whether this instance is leap year from date time the specified dt.
            </summary>
            <returns><c>true</c> if this instance is leap year from date time the specified dt; otherwise, <c>false</c>.</returns>
            <param name="dt">Dt.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetJewishMonth(System.DateTime)">
            <summary>
            Gets the jewish month.
            </summary>
            <returns>The jewish month.</returns>
            <param name="dt">Dt.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetJewishDateTime(System.Int32,Zmanim.JewishCalendar.JewishCalendar.JewishMonth,System.Int32)">
            <summary>
            Gets the jewish date time.
            </summary>
            <returns>The jewish date time.</returns>
            <param name="year">Year.</param>
            <param name="month">Month.</param>
            <param name="day">Day.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetJewishYearType(System.DateTime)">
            <summary>
            Gets the jewish year type.
            </summary>
            <returns>SHELAIMIM, KESIDRAN or CHASERIM.</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.MonthIs29Days(System.DateTime,Zmanim.JewishCalendar.JewishCalendar.JewishMonth)">
            <summary>
            Months the is 29 days / short
            </summary>
            <returns><c>true</c>, if is29 days was monthed, <c>false</c> otherwise.</returns>
            <param name="dt">Dt.</param>
            <param name="month">Month.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetJewishDaysInMonth(System.DateTime,Zmanim.JewishCalendar.JewishCalendar.JewishMonth)">
            <summary>
            Gets the jewish days in month.
            </summary>
            <returns>The jewish days in month.</returns>
            <param name="dt">Dt.</param>
            <param name="month">Month.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetJewishDaysInMonth(System.Int32,Zmanim.JewishCalendar.JewishCalendar.JewishMonth)">
            <summary>
            Gets the jewish days in month.
            </summary>
            <returns>The jewish days in month.</returns>
            <param name="year">Year.</param>
            <param name="month">Month.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetJewishHoliday(System.DateTime,System.Boolean)">
            <summary>
            Gets the jewish holiday, sets "use modern holidays" to true
            </summary>
            <returns>The jewish holiday.</returns>
            <param name="dt">Dt.</param>
            <param name="inIsrael">If set to <c>true</c> in israel.</param>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsYomTov(System.DateTime,System.Boolean)">
            <summary>
            Returns true if the current day is Yom Tov. The method returns false for Chanukah, Erev Yom Tov (with the
            exception of Hoshana Rabba and Erev the second days of Pesach) and fast days.
            </summary>
            <returns>true if the current day is a Yom Tov</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsYomTovAssurBemelacha(System.DateTime,System.Boolean)">
            <summary>
            This method will return false for a non Yom Tov day, even if it is Shabbos.
            </summary>
            <returns>if the Yom Tov day has a melacha (work)  prohibition.</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsCholHamoed(System.DateTime,System.Boolean)">
            <summary>
            Returns true if the current day is Chol Hamoed of Pesach or Succos.
            </summary>
            <returns>true if the current day is Chol Hamoed of Pesach or Succos</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsErevYomTov(System.DateTime,System.Boolean)">
            <summary>
            Returns true if the current day is erev Yom Tov. The method returns true for Erev - Pesach (first and last days),
            Shavuos, Rosh Hashana, Yom Kippur and Succos and Hoshana Rabba.
            </summary>
            <returns>true if the current day is Erev - Pesach, Shavuos, Rosh Hashana, Yom Kippur and Succos</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsErevRoshChodesh(System.DateTime)">
            <summary>
            Returns true if the current day is Erev Rosh Chodesh. Returns false for Erev Rosh Hashana
            </summary>
            <returns>true if the current day is Erev Rosh Chodesh. Returns false for Erev Rosh Hashana</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsTaanis(System.DateTime,System.Boolean)">
            <summary>
            Return true if the day is a Taanis (fast day). Return true for 17 of Tammuz, Tisha B'Av, Yom Kippur, Fast of
            Gedalyah, 10 of Teves and the Fast of Esther
            </summary>
            <returns>true if today is a fast day</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetDayOfChanukah(System.DateTime)">
            <summary>
            Returns the day of Chanukah or -1 if it is not Chanukah.
            </summary>
            <returns>the day of Chanukah or -1 if it is not Chanukah.</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsChanukah(System.DateTime)">
            <summary>
            Returns if the day is Chanukah. 
            </summary>
            <returns>if the day is Chanukah</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.IsRoshChodesh(System.DateTime)">
            <summary>
            Returns if the day is Rosh Chodesh. Rosh Hashana will return false
            </summary>
            <returns>if the day is Rosh Chodesh. Rosh Hashana will return false</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetDayOfOmer(System.DateTime)">
            <summary>
            Returns the int value of the Omer day or -1 if the day is not in the omer
            </summary>
            <returns>The Omer count as an int or -1 if it is not a day of the Omer.</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetParshaYearType(System.DateTime,System.Boolean)">
            <summary>
            Return the type of year for parsha calculations.
            The algorithm follows the
            <a href="http://hebrewbooks.org/pdfpager.aspx?req=14268&amp;st=&amp;pgnum=222"> Luach Arba'ah Shearim</a> in the Tur Ohr Hachaim.
            </summary>
            <param name="date"></param>
            <param name="inIsrael"></param>
            <returns>the type of year for parsha calculations.</returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetParshah(System.DateTime)">
            <summary>
            Gets the current <seealso cref="T:Zmanim.JewishCalendar.JewishCalendar.Parsha"/> outside israel, based on the date
            </summary>
            <param name="date">the date of the shabbos</param>
            <returns>The current parsha outside israel if its a shabbos and there is a parsha, else returns <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.Parsha.NONE"/></returns>
        </member>
        <member name="M:Zmanim.JewishCalendar.JewishCalendar.GetParshah(System.DateTime,System.Boolean)">
            <summary>
            Gets the current <seealso cref="T:Zmanim.JewishCalendar.JewishCalendar.Parsha"/> in or outside israel, based on the date
            </summary>
            <param name="date">the date of the shabbos</param>
            <param name="inIsrael">true if in israel</param>
            <returns>The current parsha if its a shabbos and there is a parsha, else returns <seealso cref="F:Zmanim.JewishCalendar.JewishCalendar.Parsha.NONE"/></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Zmanim.JewishCalendar.YomiCalculator" -->
        <member name="M:Zmanim.JewishCalendar.YomiCalculator.GetDafYomiBavli(System.DateTime)">
            <summary>
            Returns the <a href="http://en.wikipedia.org/wiki/Daf_yomi">Daf Yomi</a> <a
            href="http://en.wikipedia.org/wiki/Talmud">Bavli</a> <seealso cref="T:Zmanim.JewishCalendar.Daf"/> for a given date. The first Daf Yomi cycle
            started on Rosh Hashana 5684 (September 11, 1923) and calculations prior to this date will result in an
            IllegalArgumentException thrown. For historical calculations (supported by this method), it is important to note
            that a change in length of the cycle was instituted starting in the eighth Daf Yomi cycle beginning on June 24,
            1975. The Daf Yomi Bavli cycle has a single masechta of the Talmud Yerushalmi - Shekalim as part of the cycle.
            Unlike the Bavli where the number of daf per masechta was standardized since the original <a
            href="http://en.wikipedia.org/wiki/Daniel_Bomberg">Bomberg Edition</a> published from 1520 - 1523, there is no
            uniform page length in the Yerushalmi. The early cycles had the Yerushalmi Shekalim length of 13 days following
            the <a href="http://en.wikipedia.org/wiki/Zhytomyr">Zhytomyr</a> Shas used by <a
            href="http://en.wikipedia.org/wiki/Meir_Shapiro">Rabbi Meir Shapiro</a>. With the start of the eighth Daf Yomi
            cycle beginning on June 24, 1975 the length of the Yerushalmi shekalim was changed from 13 to 22 daf to follow
            the Vilna Shas that is in common use today.
            </summary>
            <param name="calendar">
                       the calendar date for calculation </param>
            <returns> the <seealso cref="T:Zmanim.JewishCalendar.Daf"/>.
            </returns>
            <exception cref="!:IllegalArgumentException">
                        if the date is prior to the September 11, 1923 start date of the first Daf Yomi cycle </exception>
        </member>
        <member name="M:Zmanim.JewishCalendar.YomiCalculator.GetJulianDay(System.DateTime)">
            <summary>
            Return the <a href="http://en.wikipedia.org/wiki/Julian_day">Julian day</a> from a Java Date.
            </summary>
            <param name="date">
                       The Java Date </param>
            <returns> the Julian day number corresponding to the date </returns>
        </member>
        <member name="T:Zmanim.TimeZone.ITimeZone">
            <summary>
             Provides the most basic useage of a TimeZone.
            </summary>
        </member>
        <member name="M:Zmanim.TimeZone.ITimeZone.UtcOffset(System.DateTime)">
            <summary>
            UTCs the offset.
            If Daylight Saving Time is in effect at the specified date,
            the offset value is adjusted with the amount of daylight saving.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.TimeZone.ITimeZone.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Is the current DateTime in daylight time for this time zone.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.TimeZone.ITimeZone.GetId">
            <summary>
            Gets the ID of this time zone.
            </summary>
            <returns>the ID of this time zone.</returns>
        </member>
        <member name="M:Zmanim.TimeZone.ITimeZone.GetDisplayName">
            <summary>
            Returns a name of this time zone suitable for presentation to the user in the default locale. 
            This method returns the long name, not including daylight savings.
            If the display name is not available for the locale, then this method returns a string in the normalized custom ID format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zmanim.TimeZone.ITimeZone.GetOffset(System.Int64)">
            <summary>
             Returns the offset of this time zone from UTC at the specified date.
             If Daylight Saving Time is in effect at the specified date,
             the offset value is adjusted with the amount of daylight saving.
            </summary>
            <param name="timeFromEpoch">the date represented in milliseconds since January 1, 1970 00:00:00 GMT</param>
            <returns>the amount of time in milliseconds to add to UTC to get local time.</returns>
        </member>
        <member name="T:Zmanim.TimeZone.OffsetTimeZone">
            <summary>
             TimeZone based on the Gmt offset (this is very limited)
            </summary>
        </member>
        <member name="M:Zmanim.TimeZone.OffsetTimeZone.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="hoursOffsetFromGmt">The amount of hours from gmt.</param>
        </member>
        <member name="M:Zmanim.TimeZone.OffsetTimeZone.#ctor(System.TimeSpan)">
            <summary>
            </summary>
            <param name="offsetFromGmt">TimeSpan from Gmt</param>
        </member>
        <member name="T:Zmanim.TimeZone.WindowsTimeZone">
            <summary>
            A ITimeZone implementation of the Windows TimeZone
            (uses the default .net <see cref="P:Zmanim.TimeZone.WindowsTimeZone.TimeZone"/> class)
            </summary>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.TimeZone.WindowsTimeZone"/> class.
            </summary>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.#ctor(System.TimeZoneInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.TimeZone.WindowsTimeZone"/> class.
            </summary>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.TimeZone.WindowsTimeZone"/> class.
            </summary>
            <param name="timeZoneName">Name of the time zone.</param>
        </member>
        <member name="P:Zmanim.TimeZone.WindowsTimeZone.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.UtcOffset(System.DateTime)">
            <summary>
            UTCs the offset.
            If Daylight Saving Time is in effect at the specified date,
            the offset value is adjusted with the amount of daylight saving.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Ins the daylight time.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.GetId">
            <summary>
            Gets the ID of this time zone.
            </summary>
            <returns>the ID of this time zone.</returns>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.GetDisplayName">
            <summary>
            Returns a name of this time zone suitable for presentation to the user in the default locale.
            This method returns the long name, not including daylight savings.
            If the display name is not available for the locale, then this method returns a string in the normalized custom ID format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zmanim.TimeZone.WindowsTimeZone.GetOffset(System.Int64)">
            <summary>
            Returns the offset of this time zone from UTC at the specified date.
            If Daylight Saving Time is in effect at the specified date,
            the offset value is adjusted with the amount of daylight saving.
            </summary>
            <param name="timeFromEpoch">the date represented in milliseconds since January 1, 1970 00:00:00 GMT</param>
            <returns>
            the amount of time in milliseconds to add to UTC to get local time.
            </returns>
        </member>
        <member name="T:Zmanim.AstronomicalCalendar">
            <summary>
            A calendar that calculates astronomical time calculations such as
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> and <see cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see> times. This
            class contains a <see cref="P:Zmanim.AstronomicalCalendar.DateWithLocation">Calendar</see> and can therefore use the
            standard Calendar functionality to change dates etc. The calculation engine
            used to calculate the astronomical times can be changed to a different
            implementation by implementing the <see cref="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator"/> and setting
            it with the <see cref="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator"/>. A
            number of different implementations are included in the util package <br/>
            	<b>Note:</b> There are times when the algorithms can't calculate proper
            values for sunrise, sunset and twilight. This is usually caused by trying to calculate
            times for areas either very far North or South, where sunrise / sunset never
            happen on that date. This is common when calculating twilight with a deep dip
            below the horizon for locations as south of the North Pole as London in the
            northern hemisphere. The sun never reaches this dip at certain
            times of the year. When the calculations encounter this condition a null
            will be returned when a <see cref="T:System.DateTime"/> is expected and
            <see cref="F:System.Int64.MinValue"/> when a long is expected. The reason that
            <c>Exception</c>s are not thrown in these cases is because the lack
            of a rise/set or twilight is not an exception, but expected in many parts of the world.
            Here is a simple example of how to use the API to calculate sunrise: <br/>
            First create the Calendar for the location you would like to calculate:
            <example>
            		<code>
            string locationName = "Lakewood, NJ"
            double latitude = 40.0828; //Lakewood, NJ
            double longitude = -74.2094; //Lakewood, NJ
            double elevation = 20; // optional elevation correction in Meters
            ITimeZone timeZone = new JavaTimeZone("America/New_York");
            GeoLocation location = new GeoLocation(locationName, latitude, longitude,
            elevation, timeZone);
            AstronomicalCalendar ac = new AstronomicalCalendar(location);
            </code>
            You can set the Date and Location on the constructor (or else it will default the the current day).
            <code>
            AstronomicalCalendar ac = new AstronomicalCalendar(new DateTime(2010, 2, 8), location);
            </code>
            Or you can set the DateTime by calling.
            <code>
            ac.DateWithLocation.Date = new DateTime(2010, 2, 8);
            </code>
            To get the time of sunrise
            <code>
            Date sunrise = ac.getSunrise();
            </code>
            	</example>
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">
            <summary>
              90° below the vertical. Used for certain calculations.<br />
              <b>Note </b>: it is important to note the distinction between this zenith
              and the <see cref = "M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusted zenith</see> used
              for some solar calculations. This 90 zenith is only used because some
              calculations in some subclasses are historically calculated as an offset
              in reference to 90.
            </summary>
        </member>
        <member name="F:Zmanim.AstronomicalCalendar.CIVIL_ZENITH">
            <summary>
              Sun's zenith at civil twilight (96°).
            </summary>
        </member>
        <member name="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH">
            <summary>
              Sun's zenith at nautical twilight (102°).
            </summary>
        </member>
        <member name="F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH">
            <summary>
              Sun's zenith at astronomical twilight (108°).
            </summary>
        </member>
        <member name="F:Zmanim.AstronomicalCalendar.MINUTE_MILLIS">
            <summary>
              constant for milliseconds in a minute (60,000)
            </summary>
        </member>
        <member name="F:Zmanim.AstronomicalCalendar.HOUR_MILLIS">
            <summary>
              constant for milliseconds in an hour (3,600,000)
            </summary>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.#ctor">
            <summary>
              Default constructor will set a default <see cref = "T:Zmanim.Utilities.GeoLocation" />,
              a default
              <see cref = "M:Zmanim.Calculator.AstronomicalCalculator.GetDefault">AstronomicalCalculator</see> and
              default the calendar to the current date.
            </summary>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.#ctor(Zmanim.Utilities.IGeoLocation)">
            <summary>
              A constructor that takes in as a parameter geolocation information
            </summary>
            <param name = "geoLocation">
              The location information used for astronomical calculating sun
              times. </param>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.#ctor(System.DateTime,Zmanim.Utilities.IGeoLocation)">
            <summary>
              A constructor that takes in as a parameter geolocation information
            </summary>
            <param name="dateTime">The DateTime</param>
            <param name = "geoLocation">
              The location information used for astronomical calculating sun
              times. </param>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.#ctor(Zmanim.IDateWithLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.AstronomicalCalendar"/> class.
            </summary>
            <param name="dateWithLocation">The date with location.</param>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunrise">
            <summary>
            The getSunrise method Returns a <c>DateTime</c> representing the
            sunrise time. The zenith used for the calculation uses
            <seealso cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</seealso> of 90°. This is adjusted
            by the <seealso cref="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator"/> that adds approximately 50/60 of a
            degree to account for 34 archminutes of refraction and 16 archminutes for
            the sun's radius for a total of
            <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">90.83333°</seealso>. See
            documentation for the specific implementation of the
            <seealso cref="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator"/> that you are using.
            </summary>
            <returns>
            the <c>DateTime</c> representing the exact sunrise time.
            If the calculation can't be computed such as in the Arctic
            Circle where there is at least one day a year where the sun does
            not rise, and one where it does not set, a null will be returned.
            See detailed explanation on top of the page.
            </returns>
            <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">
            <summary>
            Method that returns the sunrise without correction for elevation.
            Non-sunrise and sunset calculations such as dawn and dusk, depend on the
            amount of visible light, something that is not affected by elevation.
            This method returns sunrise calculated at sea level. This forms the base
            for dawn calculations that are calculated as a dip below the horizon
            before sunrise.
            </summary>
            <returns>
            the <c>DateTime</c> representing the exact sea-level sunrise
            time.
            If the calculation can't be computed such as in the Arctic
            Circle where there is at least one day a year where the sun does
            not rise, and one where it does not set, a null will be returned.
            See detailed explanation on top of the page.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise"/>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetUtcSeaLevelSunrise(System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetBeginCivilTwilight">
            <summary>
            A method to return the the beginning of civil twilight (dawn) using a
            zenith of <seealso cref="F:Zmanim.AstronomicalCalendar.CIVIL_ZENITH">96°</seealso>.
            </summary>
            <returns>
            The <c>DateTime</c> of the beginning of civil twilight using
            a zenith of 96°. If the calculation can't be computed (see explanation on top of the page), null
            will be returned.
            </returns>
            <seealso cref="F:Zmanim.AstronomicalCalendar.CIVIL_ZENITH"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetBeginNauticalTwilight">
            <summary>
              A method to return the the beginning of nautical twilight using a zenith
              of <see cref = "F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH">102°</see>.
            </summary>
            <returns> The <c>DateTime</c> of the beginning of nautical twilight
              using a zenith of 102°. If the calculation can't be
              computed (see explanation on top of the page), null will be returned. </returns>
            <seealso cref = "F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH" />
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetBeginAstronomicalTwilight">
            <summary>
              A method that returns the the beginning of astronomical twilight using a
              zenith of <see cref = "F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH">108°</see>.
            </summary>
            <returns> The <c>DateTime</c> of the beginning of astronomical twilight
              using a zenith of 108°. If the 
             calculation can't be computed (see explanation on top of thepage),
             null will be returned.
             </returns>
            <seealso cref = "F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH" />
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunset">
            <summary>
            The getSunset method Returns a <c>DateTime</c> representing the
            sunset time. The zenith used for the calculation uses
            <see cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see> of 90°. This is adjusted
            by the <see cref="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator"/> that adds approximately 50/60 of a
            degree to account for 34 archminutes of refraction and 16 archminutes for
            the sun's radius for a total of
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">90.83333°</see>. See
            documentation for the specific implementation of the
            <see cref="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator"/> that you are using. Note: In certain cases
            the calculates sunset will occur before sunrise. This will typically
            happen when a timezone other than the local timezone is used (calculating
            Los Angeles sunset using a GMT timezone for example). In this case the
            sunset date will be incremented to the following date.
            </summary>
            <returns>
            the <c>DateTime</c> representing the exact sunset time. 
            If the calculation can't be computed such as in the Arctic
            Circle where there is at least one day a year where the sun does
            not rise, and one where it does not set, a null will be returned.
            See detailed explanation on top of the page.
            </returns>
            <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetAdjustedSunsetDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            A method that will roll the sunset time forward a day if sunset occurs
            before sunrise. This will typically happen when a timezone other than the
            local timezone is used (calculating Los Angeles sunset using a GMT
            timezone for example). In this case the sunset date will be incremented
            to the following date.
            </summary>
            <param name="sunset">the sunset date to adjust if needed</param>
            <param name="sunrise">the sunrise to compare to the sunset</param>
            <returns>
            the adjusted sunset date.
            If the calculation can't be computed such as in the Arctic
            Circle where there is at least one day a year where the sun does
            not rise, and one where it does not set, a null will be returned.
            See detailed explanation on top of the page.
            </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">
            <summary>
            Method that returns the sunset without correction for elevation.
            Non-sunrise and sunset calculations such as dawn and dusk, depend on the
            amount of visible light, something that is not affected by elevation.
            This method returns sunset calculated at sea level. This forms the base
            for dusk calculations that are calculated as a dip below the horizon
            after sunset.
            </summary>
            <returns>
            the <c>DateTime</c> representing the exact sea-level sunset time.
            If the calculation can't be computed such as in the Arctic
            Circle where there is at least one day a year where the sun does
            not rise, and one where it does not set, a null will be returned.
            See detailed explanation on top of the page.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunset"/>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetUtcSeaLevelSunset(System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetEndCivilTwilight">
            <summary>
            A method to return the the end of civil twilight using a zenith of
            <see cref="F:Zmanim.AstronomicalCalendar.CIVIL_ZENITH">96°</see>.
            </summary>
            <returns>
            The <c>DateTime</c> of the end of civil twilight using a
            zenith of <seealso cref="F:Zmanim.AstronomicalCalendar.CIVIL_ZENITH">96°</seealso>. If the 
            calculation can't be computed (see explanation on top of thepage),
            null will be returned.
            </returns>
            <seealso cref="F:Zmanim.AstronomicalCalendar.CIVIL_ZENITH"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetEndNauticalTwilight">
            <summary>
            A method to return the the end of nautical twilight using a zenith of
            <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH">102°</see>.
            </summary>
            <returns>
            The <c>DateTime</c> of the end of nautical twilight using a
            zenith of <seealso cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH">102°</seealso>. If the 
            calculation can't be computed (see explanation on top of thepage),
            null will be returned.
            </returns>
            <seealso cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetEndAstronomicalTwilight">
            <summary>
            A method to return the the end of astronomical twilight using a zenith of
            <see cref="F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH">108°</see>.
            </summary>
            <returns>
            The The <c>DateTime</c> of the end of astronomical twilight
            using a zenith of <see cref="F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH">108°</see>.
            If the calculation can't be computed (see explanation on top of thepage),
            null will be returned.
            </returns>
            <seealso cref="F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetTimeOffset(System.DateTime,System.Double)">
            <summary>
            Utility method that returns a date offset by the offset time passed in.
            This method casts the offset as a <code>long</code> and calls
            <see cref="M:Zmanim.AstronomicalCalendar.GetTimeOffset(System.DateTime,System.Int64)"/>.
            </summary>
            <param name="time">the start time</param>
            <param name="offset">the offset in milliseconds to add to the time</param>
            <returns>
            the <see cref="T:System.DateTime"/>with the offset added to it
            </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetTimeOffset(System.DateTime,System.Int64)">
            <summary>
            A utility method to return a date offset by the offset time passed in.
            </summary>
            <param name="time">the start time</param>
            <param name="offset">the offset in milliseconds to add to the time.</param>
            <returns>
            the <see cref="T:System.DateTime"/> with the offset in milliseconds added
            to it
            </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunriseOffsetByDegrees(System.Double)">
            <summary>
            A utility method to return the time of an offset by degrees below or
            above the horizon of <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>.
            </summary>
            <param name="offsetZenith">the degrees before <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise"/> to use in the
            calculation. For time after sunrise use negative numbers.</param>
            <returns>
            The <seealso cref="T:System.DateTime"/> of the offset after (or before)
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise"/>.
            If the calculation can't be computed such as in the Arctic
            Circle where there is at least one day a year where the sun does
            not rise, and one where it does not set, a null will be returned.
            See detailed explanation on top of the page.
            </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunsetOffsetByDegrees(System.Double)">
            <summary>
              A utility method to return the time of an offset by degrees below or
              above the horizon of <see cref = "M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>.
            </summary>
            <param name = "offsetZenith">
              the degrees after <see cref = "M:Zmanim.AstronomicalCalendar.GetSunset" /> to use in the
              calculation. For time before sunset use negative numbers. </param>
            <returns> The <seealso cref = "T:System.DateTime" />of the offset after (or before)
              <see cref = "M:Zmanim.AstronomicalCalendar.GetSunset" />.
             If the calculation can't be computed such as in the Arctic Circle where
             there is at least one day a year where the sun does not rise, and
             one where it does not set, <see cref="F:System.Double.NaN"/> will be returned.
             See detailed explanation on top of the page.
             </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetUtcSunrise(System.Double)">
            <summary>
            Method that returns the sunrise in UTC time without correction for time
            zone offset from GMT and without using daylight savings time.
            </summary>
            <param name="zenith">the degrees below the horizon. For time after sunrise use
            negative numbers.</param>
            <returns>
            The time in the format: 18.75 for 18:45:00 UTC/GMT. 
            If the calculation can't be computed such as in the Arctic Circle where
            there is at least one day a year where the sun does not rise, and
            one where it does not set, <see cref="F:System.Double.NaN"/> will be returned.
            See detailed explanation on top of the page.
            </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetUtcSeaLevelSunrise(System.Double)">
            <summary>
            Method that returns the sunrise in UTC time without correction for time
            zone offset from GMT and without using daylight savings time. Non-sunrise
            and sunset calculations such as dawn and dusk, depend on the amount of
            visible light, something that is not affected by elevation. This method
            returns UTC sunrise calculated at sea level. This forms the base for dawn
            calculations that are calculated as a dip below the horizon before
            sunrise.
            </summary>
            <param name="zenith">the degrees below the horizon. For time after sunrise use
            negative numbers.</param>
            <returns>
            The time in the format: 18.75 for 18:45:00 UTC/GMT.
            If the calculation can't be computed such as in the Arctic Circle where
            there is at least one day a year where the sun does not rise, and
            one where it does not set, <see cref="F:System.Double.NaN"/> will be returned.
            See detailed explanation on top of the page.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetUtcSunrise(System.Double)"/>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetUtcSeaLevelSunset(System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetUtcSunset(System.Double)">
            <summary>
            Method that returns the sunset in UTC time without correction for time
            zone offset from GMT and without using daylight savings time.
            </summary>
            <param name="zenith">the degrees below the horizon. For time after before sunset
            use negative numbers.</param>
            <returns>
            The time in the format: 18.75 for 18:45:00 UTC/GMT.
            If the calculation can't be computed such as in the Arctic Circle where
            there is at least one day a year where the sun does not rise, and
            one where it does not set, <see cref="F:System.Double.NaN"/> will be returned.
            See detailed explanation on top of the page.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetUtcSeaLevelSunset(System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetUtcSeaLevelSunset(System.Double)">
            <summary>
            Method that returns the sunset in UTC time without correction for
            elevation, time zone offset from GMT and without using daylight savings
            time. Non-sunrise and sunset calculations such as dawn and dusk, depend
            on the amount of visible light, something that is not affected by
            elevation. This method returns UTC sunset calculated at sea level. This
            forms the base for dusk calculations that are calculated as a dip below
            the horizon after sunset.
            </summary>
            <param name="zenith">the degrees below the horizon. For time before sunset use
            negative numbers.</param>
            <returns>
            The time in the format: 18.75 for 18:45:00 UTC/GMT.
            If the calculation can't be computed such as in the Arctic Circle where
            there is at least one day a year where the sun does not rise, and
            one where it does not set, <see cref="F:System.Double.NaN"/> will be returned.
            See detailed explanation on top of the page.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetUtcSunset(System.Double)"/>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetUtcSeaLevelSunrise(System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetTemporalHour">
            <summary>
            Method to return a temporal (solar) hour. The day from sunrise to sunset
            is split into 12 equal parts with each one being a temporal hour.
            </summary>
            <returns>
            the <c>long</c> millisecond length of a temporal hour. If
            the calculation can't be computed  (see explanation on top of the page) <see cref="F:System.Int64.MinValue"/>
            will be returned.
            </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetTemporalHour(System.DateTime,System.DateTime)">
            <summary>
            Utility method that will allow the calculation of a temporal (solar) hour
            based on the sunrise and sunset passed to this method.
            </summary>
            <param name="sunrise">The start of the day.</param>
            <param name="sunset">The end of the day.</param>
            <returns>
            the <code>long</code> millisecond length of the temporal hour.
            If the calculation can't be computed (see explanation on top of the page)
            <see cref="F:System.Int64.MinValue"/> will be returned.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunTransit">
            <summary>
            A method that returns sundial or solar noon. It occurs when the Sun is
            <a href="http://en.wikipedia.org/wiki/Transit_%28astronomy%29">transitting</a> the 
            <a href="http://en.wikipedia.org/wiki/Meridian_%28astronomy%29">celestial meridian</a>.
            In this class it is calculated as halfway between sea level sunrise and sea level sunset,
            which can be slightly off the real transit
            time due to changes in declination (the lengthening or shortening day).
            </summary>
            <returns> the <code>Date</code> representing Sun's transit. If the calculation can't be computed such as in the
                    Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does
                    not set, null will be returned. See detailed explanation on top of the page. </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunTransit"/>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunTransit(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            A method that returns sundial or solar noon. It occurs when the Sun is 
            <a href="http://en.wikipedia.org/wiki/Transit_%28astronomy%29">transitting</a>
            the <a href="http://en.wikipedia.org/wiki/Meridian_%28astronomy%29">celestial meridian</a>. In this class it is
            calculated as halfway between the sunrise and sunset passed to this method. This time can be slightly off the
            real transit time due to changes in declination (the lengthening or shortening day).
            </summary>
            <param name="startOfDay">
                       the start of day for calculating the sun's transit. This can be sea level sunrise, visual sunrise (or
                       any arbitrary start of day) passed to this method. </param>
            <param name="endOfDay">
                       the end of day for calculating the sun's transit. This can be sea level sunset, visual sunset (or any
                       arbitrary end of day) passed to this method.
            </param>
            <returns> the <code>Date</code> representing Sun's transit. If the calculation can't be computed such as in the
                    Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does
                    not set, null will be returned. See detailed explanation on top of the page. </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetDateFromTime(System.Double)">
            <summary>
              A method that returns a <c>DateTime</c> from the time passed in
            </summary>
            <param name = "time">
              The time to be set as the time for the <c>DateTime</c>.
              The time expected is in the format: 18.75 for 6:45:00 PM </param>
            <returns> The Date. </returns>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunriseSolarDipFromOffset(System.Double)">
            <summary>
            Will return the dip below the horizon before sunrise that matches the
            offset minutes on passed in. For example passing in 72 minutes for a
            calendar set to the equinox in Jerusalem returns a value close to
            16.1°
            Please note that this method is very slow and inefficient and should NEVER be used in a loop.
            <em><b>TODO:</b></em> Improve efficiency.
            </summary>
            <param name="minutes">offset</param>
            <returns>
            the degrees below the horizon that match the offset on the
            equinox in Jerusalem at sea level.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunsetSolarDipFromOffset(System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetSunsetSolarDipFromOffset(System.Double)">
            <summary>
            Will return the dip below the horizon after sunset that matches the
            offset minutes on passed in. For example passing in 72 minutes for a
            calendar set to the equinox in Jerusalem returns a value close to
            16.1°
            Please note that this method is very slow and inefficient and should NEVER be used in a loop.
            <em><b>TODO:</b></em> Improve efficiency.
            </summary>
            <param name="minutes">offset</param>
            <returns>
            the degrees below the horizon that match the offset on the
            equinox in Jerusalem at sea level.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunriseSolarDipFromOffset(System.Double)"/>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.ToString">
            <returns> an XML formatted representation of the class. It returns the
              default output of the
              <see cref = "M:Zmanim.Utilities.ZmanimFormatter.ToXml(Zmanim.AstronomicalCalendar)">toXML</see>
              method. </returns>
            <seealso cref = "M:Zmanim.Utilities.ZmanimFormatter.ToXml(Zmanim.AstronomicalCalendar)" />
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Zmanim.AstronomicalCalendar.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator">
            <summary>
            Gets or Sets the current AstronomicalCalculator set.
            </summary>
            <value>Returns the astronimicalCalculator.</value>
        </member>
        <member name="P:Zmanim.AstronomicalCalendar.DateWithLocation">
            <summary>
            Gets or Sets the Date and Location to be used in the calculations.
            </summary>
            <value>The calendar to set.</value>
        </member>
        <member name="T:Zmanim.Calculator.AstronomicalCalculator">
            <summary>
              An abstract class that all sun time calculating classes extend. This allows
              the algorithm used to be changed at runtime, easily allowing comparison the
              results of using different algorithms.
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="M:Zmanim.Calculator.AstronomicalCalculator.GetDefault">
            <summary>
              getDefault method returns the default sun times calculation engine.
            </summary>
            <returns> AstronomicalCalculator the default class for calculating sunrise
              and sunset. In the current implementation the default calculator
              returned is the <see cref = "T:Zmanim.Calculator.SunTimesCalculator" />. </returns>
        </member>
        <member name="M:Zmanim.Calculator.AstronomicalCalculator.GetElevationAdjustment(System.Double)">
            <summary>
              Method to return the adjustment to the zenith required to account for the
              elevation. Since a person at a higher elevation can see farther below the
              horizon, the calculation for sunrise / sunset is calculated below the
              horizon used at sea level. This is only used for sunrise and sunset and
              not times above or below it such as
              <see cref = "M:Zmanim.AstronomicalCalendar.GetBeginNauticalTwilight">nautical twilight</see>
              since those calculations are based on the level of available light at the
              given dip below the horizon, something that is not affected by elevation,
              the adjustment should only made if the zenith == 90°;
              <see cref = "M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusted</see> for refraction and solar radius.<br />
              The algorithm used is:
            	
              <code>
                elevationAdjustment = MathExtensions.ToDegree(Math.acos(earthRadiusInMeters
                / (earthRadiusInMeters + elevationMeters)));
              </code>
            	
              The source of this algorthitm is <a href = "http://www.calendarists.com">Calendrical Calculations</a> by
              Edward M. Reingold and Nachum Dershowitz. An alternate algorithm that
              produces an almost identical (but not accurate) result found in Ma'aglay
              Tzedek by Moishe Kosower and other sources is:
            	
              <code>
                elevationAdjustment = 0.0347 * Math.sqrt(elevationMeters);
              </code>
            </summary>
            <param name = "elevation">
              elevation in Meters. </param>
            <returns> the adjusted zenith </returns>
        </member>
        <member name="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">
            <summary>
              Adjusts the zenith to account for solar refraction, solar radius and
              elevation. The value for Sun's zenith and true rise/set Zenith (used in
              this class and subclasses) is the angle that the center of the Sun makes
              to a line perpendicular to the Earth's surface. If the Sun were a point
              and the Earth were without an atmosphere, true sunset and sunrise would
              correspond to a 90°; zenith. Because the Sun is not a point, and
              because the atmosphere refracts light, this 90°; zenith does not, in
              fact, correspond to true sunset or sunrise, instead the centre of the
              Sun's disk must lie just below the horizon for the upper edge to be
              obscured. This means that a zenith of just above 90°; must be used.
              The Sun subtends an angle of 16 minutes of arc (this can be changed via
              the <see cref = "P:Zmanim.Calculator.AstronomicalCalculator.SolarRadius" /> method , and atmospheric refraction
              accounts for 34 minutes or so (this can be changed via the
              <see cref = "P:Zmanim.Calculator.AstronomicalCalculator.Refraction" /> method), giving a total of 50 arcminutes.
              The total value for ZENITH is 90+(5/6) or 90.8333333°; for true
              sunrise/sunset. Since a person at an elevation can see blow the horizon
              of a person at sea level, this will also adjust the zenith to account for
              elevation if available.
            </summary>
            <returns> The zenith adjusted to include the
              <seealso cref="P:Zmanim.Calculator.AstronomicalCalculator.SolarRadius">sun's radius</seealso>,
              <seealso cref="P:Zmanim.Calculator.AstronomicalCalculator.Refraction">refraction</seealso> and
              <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.GetElevationAdjustment(System.Double)">elevation</seealso> adjustment.
            </returns>
        </member>
        <member name="P:Zmanim.Calculator.AstronomicalCalculator.Refraction">
            <summary>
             Method to get the refraction value to be used when calculating sunrise and sunset.The default value is 34 arc
             minutes. The<a href="http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/errata.pdf"> Errata and
             Notes for Calendrical Calculations: The Millenium Eddition</a> by Edward M. Reingold and Nachum Dershowitz lists
             the actual average refraction value as 34.478885263888294 or approximately 34' 29". The refraction value as well
             as the solarRadius and elevation adjustment are added to the zenith used to calculate sunrise and sunset.
            
             Allow overriding the default refraction of the calculator. TODO: At some point in the future, an
             AtmosphericModel or Refraction object that models the atmosphere of different locations might be used for
             increased accuracy.
            </summary>
            <value>
              The refraction in arc minutes. </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Zmanim.Calculator.AstronomicalCalculator.SolarRadius" -->
        <member name="P:Zmanim.Calculator.AstronomicalCalculator.CalculatorName">
            <summary>
            A descriptive name of the algorithm.
            </summary>
            <value></value>
        </member>
        <member name="M:Zmanim.Calculator.AstronomicalCalculator.GetUtcSunrise(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunrise as well as any time based on an
            angle above or below sunrise. This abstract method is implemented by the
            classes that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90 degrees. for
            sunrise typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for
            the calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetBeginNauticalTwilight"/>
            that passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to
            this method.</param>
            <param name="adjustForElevation">if set to <c>true</c> [adjust for elevation].</param>
            <returns>
            The UTC time of sunrise in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <see cref="F:System.Double.NaN"/> will be returned.
            </returns>
        </member>
        <member name="M:Zmanim.Calculator.AstronomicalCalculator.GetUtcSunset(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunset as well as any time based on an angle
            above or below sunset. This abstract method is implemented by the classes
            that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90°;. For sunset
            typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for the
            calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetEndNauticalTwilight"/> that
            passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to this
            method.</param>
            <param name="adjustForElevation">if set to <c>true</c> [adjust for elevation].</param>
            <returns>
            The UTC time of sunset in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <seealso cref="F:System.Double.NaN"/> will be returned.
            </returns>
        </member>
        <member name="T:Zmanim.Calculator.IAstronomicalCalculator">
            <summary>
            A interface that defines the sservices needed to calculate sunrise and sunset.
            </summary>
        </member>
        <member name="P:Zmanim.Calculator.IAstronomicalCalculator.CalculatorName">
            <summary>
             A descriptive name of the algorithm.
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.IAstronomicalCalculator.GetUtcSunrise(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunrise as well as any time based on an
            angle above or below sunrise. This abstract method is implemented by the
            classes that extend this class.
            </summary>
            <param name="astronomicalCalendar">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90 degrees. for
            sunrise typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for
            the calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetBeginNauticalTwilight"/>
            that passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to
            this method.</param>
            <param name="adjustForElevation">if set to <c>true</c> [adjust for elevation].</param>
            <returns>
            The UTC time of sunrise in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <see cref="F:System.Double.NaN"/> will be returned.
            </returns>
        </member>
        <member name="M:Zmanim.Calculator.IAstronomicalCalculator.GetUtcSunset(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunset as well as any time based on an angle
            above or below sunset. This abstract method is implemented by the classes
            that extend this class.
            </summary>
            <param name="astronomicalCalendar">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90°;. For sunset
            typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for the
            calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetEndNauticalTwilight"/> that
            passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to this
            method.</param>
            <param name="adjustForElevation">if set to <c>true</c> [adjust for elevation].</param>
            <returns>
            The UTC time of sunset in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <seealso cref="F:System.Double.NaN"/> will be returned.
            </returns>
        </member>
        <member name="T:Zmanim.Calculator.NOAACalculator">
            <summary>
              Implementation of sunrise and sunset methods to calculate astronomical times based on the <a href = "http://noaa.gov">NOAA</a> algorithm.
              This calculator uses the Java algorithm based on the implementation by <a href = "http://noaa.gov">NOAA - National Oceanic and Atmospheric
                                                                                       Administration</a>'s <a href = "http://www.srrb.noaa.gov/highlights/sunrise/sunrisehtml">Surface Radiation
                                                                                                              Research Branch</a>. NOAA's <a href = "http://www.srrb.noaa.gov/highlights/sunrise/solareqns.PDF">implementation</a>
              is based on equations from <a href = "http://www.willbell.com/math/mc1.htm">Astronomical Algorithms</a> by
              <a href = "http://en.wikipedia.org/wiki/Jean_Meeus">Jean Meeus</a>. Added to
              the algorithm is an adjustment of the zenith to account for elevation.
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="F:Zmanim.Calculator.NOAACalculator.JULIAN_DAY_JAN_1_2000">
            The <a href="http://en.wikipedia.org/wiki/Julian_day">Julian day</a> of January 1, 2000
        </member>
        <member name="F:Zmanim.Calculator.NOAACalculator.JULIAN_DAYS_PER_CENTURY">
            Julian days per century
        </member>
        <member name="P:Zmanim.Calculator.NOAACalculator.CalculatorName">
            <summary>
            Gets the name of the Calculator.
            </summary>
            <value>the descriptive name of the algorithm.</value>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetUtcSunrise(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunrise as well as any time based on an
            angle above or below sunrise. This abstract method is implemented by the
            classes that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90 degrees. for
            sunrise typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for
            the calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetBeginNauticalTwilight"/>
            that passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to
            this method.</param>
            <param name="adjustForElevation">if set to <c>true</c> [adjust for elevation].</param>
            <returns>
            The UTC time of sunrise in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <see cref="F:System.Double.NaN"/> will be returned.
            </returns>
            <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.GetUtcSunrise(Zmanim.IDateWithLocation,System.Double,System.Boolean)"/>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetUtcSunset(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunset as well as any time based on an angle
            above or below sunset. This abstract method is implemented by the classes
            that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90°;. For sunset
            typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for the
            calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetEndNauticalTwilight"/> that
            passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to this
            method.</param>
            <param name="adjustForElevation"></param>
            <returns>
            The UTC time of sunset in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <seealso cref="F:System.Double.NaN"/> will be returned.
            </returns>
            <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.GetUtcSunset(Zmanim.IDateWithLocation,System.Double,System.Boolean)"/>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetJulianDay(System.DateTime)">
            <summary>
              Generate a Julian day from a .NET date
            </summary>
            <param name="date">DateTime</param>
            <returns> the Julian day corresponding to the date Note: Number is returned
              for start of day. Fractional days should be added later. </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetJulianCenturiesFromJulianDay(System.Double)">
            <summary>
             Convert <a href="http://en.wikipedia.org/wiki/Julian_day">Julian day</a> to centuries since J2000.0.
            </summary>
            <param name="julianDay">
              the Julian Day to convert </param>
            <returns> the T value corresponding to the Julian Day </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetJulianDayFromJulianCenturies(System.Double)">
            <summary>
             Convert centuries since J2000.0 to <a href="http://en.wikipedia.org/wiki/Julian_day">Julian day</a>.
            </summary>
            <param name="julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns>the Julian Day corresponding to the Julian centuries passed in</returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunGeometricMeanLongitude(System.Double)">
            <summary>
             Returns the Geometric <a href="http://en.wikipedia.org/wiki/Mean_longitude">Mean Longitude</a> of the Sun.
            </summary>
            <param name="julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> the Geometric Mean Longitude of the Sun in degrees </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunGeometricMeanAnomaly(System.Double)">
            <summary>
              Returns the Geometric <a href="http://en.wikipedia.org/wiki/Mean_anomaly">Mean Anomaly</a> of the Sun.
            </summary>
            <param name="julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> the Geometric Mean Anomaly of the Sun in degrees </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetEarthOrbitEccentricity(System.Double)">
            <summary>
             Return the <a href="http://en.wikipedia.org/wiki/Eccentricity_%28orbit%29">eccentricity of earth's orbit</a>.
            </summary>
            <param name="julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> the unitless eccentricity </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunEquationOfCenter(System.Double)">
            <summary>
             Returns the <a href="http://en.wikipedia.org/wiki/Equation_of_the_center">equation of center</a> for the sun.
            </summary>
            <param name = "julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> the equation of center for the sun in degrees </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunTrueLongitude(System.Double)">
            <summary>
              Calculate the true longitude of the sun
            </summary>
            <param name = "julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> the sun's true longitude in degrees </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunApparentLongitude(System.Double)">
            <summary>
              calculate the apparent longitude of the sun
            </summary>
            <param name = "julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> sun's apparent longitude in degrees </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetMeanObliquityOfEcliptic(System.Double)">
            <summary>
             Returns the mean <a href="http://en.wikipedia.org/wiki/Axial_tilt">obliquity of the ecliptic</a> (Axial tilt).
            </summary>
            <param name = "julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> the mean obliquity in degrees </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetObliquityCorrection(System.Double)">
            <summary>
             Returns the corrected <a href="http://en.wikipedia.org/wiki/Axial_tilt">obliquity of the ecliptic</a> (Axial tilt)
            </summary>
            <param name = "julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> the corrected obliquity in degrees </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunDeclination(System.Double)">
            <summary>
             Return the <a href="http://en.wikipedia.org/wiki/Declination">declination</a> of the sun.
            </summary>
            <param name = "julianCenturies">
              the number of Julian centuries since J2000.0 </param>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetEquationOfTime(System.Double)">
            <summary>
             Return the <a href="http://en.wikipedia.org/wiki/Equation_of_time">Equation of Time</a> - the difference between
             true solar time and mean solar time
            </summary>
            <param name="julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <returns> equation of time in minutes of time </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunHourAngleAtSunrise(System.Double,System.Double,System.Double)">
            <summary>
            Return the <a href="http://en.wikipedia.org/wiki/Hour_angle">hour angle</a> of the sun at sunrise for the
            latitude.
            </summary>
            <param name="lat">,
            the latitude of observer in degrees</param>
            <param name="solarDec">the declination angle of sun in degrees</param>
            <param name="zenith">The zenith.</param>
            <returns>hour angle of sunrise in radians</returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunHourAngleAtSunset(System.Double,System.Double,System.Double)">
            <summary>
            Returns the <a href="http://en.wikipedia.org/wiki/Hour_angle">hour angle</a> of the sun at sunset for the
            latitude.
            </summary>
            <param name="lat">the latitude of observer in degrees</param>
            <param name="solarDec">the declination angle of sun in degrees</param>
            <param name="zenith">The zenith.</param>
            <returns>
            the hour angle of sunset in radians.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.Calculator.NOAACalculator.GetSolarElevation(Zmanim.IDateWithLocation)" -->
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunriseUTC(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Return the <a href="http://en.wikipedia.org/wiki/Universal_Coordinated_Time">Universal Coordinated Time</a> (UTC)
            of sunrise for the given day at the given location on earth
            </summary>
            <param name="julianDay">the julian day</param>
            <param name="latitude">the latitude of observer in degrees</param>
            <param name="longitude">the longitude of observer in degrees</param>
            <param name="zenith">The zenith.</param>
            <returns>the time in minutes from zero Z</returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSolarNoonUTC(System.Double,System.Double)">
            <summary>
             Return the <a href="http://en.wikipedia.org/wiki/Universal_Coordinated_Time">Universal Coordinated Time</a> (UTC)
             of<a href="http://en.wikipedia.org/wiki/Noon#Solar_noon"> solar noon</a> for the given day at the given location
             on earth.
            </summary>
            <param name = "julianCenturies">
              the number of Julian centuries since J2000.0 </param>
            <param name = "longitude">
              the longitude of observer in degrees </param>
            <returns> the time in minutes from zero Z </returns>
        </member>
        <member name="M:Zmanim.Calculator.NOAACalculator.GetSunsetUTC(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Return the <a href="http://en.wikipedia.org/wiki/Universal_Coordinated_Time">Universal Coordinated Time</a> (UTC)
             of sunset for the given day at the given location on earth
            </summary>
            <param name = "julianDay">
              the julian day </param>
            <param name = "latitude">
              the latitude of observer in degrees </param>
            <param name = "longitude"> :
              longitude of observer in degrees </param>
            <param name = "zenith"> </param>
            <returns> the time in minutes from zero Z </returns>
        </member>
        <member name="T:Zmanim.Calculator.SunTimesCalculator">
            <summary>
              Implementation of sunrise and sunset methods to calculate astronomical times.
              This calculator uses the Java algorithm written by <a href = "http://www.kevinboone.com/suntimes.html">Kevin Boone</a> that is based
              on the <a href = "http://aa.usno.navy.mil/">US Naval Observatory's</a><a href = "http://aa.usno.navy.mil/publications/docs/asa.php">Almanac</a> for
              Computer algorithm ( <a href = "http://www.amazon.com/exec/obidos/tg/detail/-/0160515106/">Amazon</a>,
              <a href = "http://search.barnesandnoble.com/booksearch/isbnInquiry.asp?isbn=0160515106">Barnes
                &amp; Noble</a>) and is used with his permission. Added to Kevin's code is
              adjustment of the zenith to account for elevation.
            </summary>
            <author>Kevin Boone</author>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="P:Zmanim.Calculator.SunTimesCalculator.CalculatorName">
            <summary>
            </summary>
            <value>the descriptive name of the algorithm.</value>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetUtcSunrise(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunrise as well as any time based on an
            angle above or below sunrise. This abstract method is implemented by the
            classes that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90 degrees. for
            sunrise typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for
            the calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetBeginNauticalTwilight"/>
            that passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to
            this method.</param>
            <param name="adjustForElevation">if set to <c>true</c> [adjust for elevation].</param>
            <returns>
            The UTC time of sunrise in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <see cref="F:System.Double.NaN"/> will be returned.
            </returns>
            <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.GetUtcSunrise(Zmanim.IDateWithLocation,System.Double,System.Boolean)"/>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetUtcSunset(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunset as well as any time based on an angle
            above or below sunset. This abstract method is implemented by the classes
            that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90°;. For sunset
            typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for the
            calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetEndNauticalTwilight"/> that
            passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to this
            method.</param>
            <param name="adjustForElevation"></param>
            <returns>
            The UTC time of sunset in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <seealso cref="F:System.Double.NaN"/> will be returned.
            </returns>
            <seealso cref="M:Zmanim.Calculator.AstronomicalCalculator.GetUtcSunset(Zmanim.IDateWithLocation,System.Double,System.Boolean)"/>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.SinDeg(System.Double)">
            <summary>
              sin of an angle in degrees
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.AcosDeg(System.Double)">
            <summary>
              acos of an angle, result in degrees
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.AsinDeg(System.Double)">
            <summary>
              * asin of an angle, result in degrees
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.TanDeg(System.Double)">
            <summary>
              tan of an angle in degrees
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.CosDeg(System.Double)">
            <summary>
              cos of an angle in degrees
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetHoursFromMeridian(System.Double)">
            <summary>
              Get time difference between location's longitude and the Meridian, in
              hours. West of Meridian has a negative time difference
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetApproxTimeDays(System.Int32,System.Double,System.Boolean)">
            <summary>
              Gets the approximate time of sunset or sunrise In _days_ since midnight
              Jan 1st, assuming 6am and 6pm events. We need this figure to derive the
              Sun's mean anomaly
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetMeanAnomaly(System.Int32,System.Double,System.Boolean)">
            <summary>
              Calculate the Sun's mean anomaly in degrees, at sunrise or sunset, given
              the longitude in degrees
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetSunTrueLongitude(System.Double)">
            <summary>
              Calculates the Sun's true longitude in degrees. The result is an angle
              gte 0 and lt 360. Requires the Sun's mean anomaly, also in degrees
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetSunRightAscensionHours(System.Double)">
            <summary>
              Calculates the Sun's right ascension in hours, given the Sun's true
              longitude in degrees. Input and output are angles gte 0 and lt 360.
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetCosLocalHourAngle(System.Double,System.Double,System.Double)">
            <summary>
              Gets the cosine of the Sun's local hour angle
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetLocalMeanTime(System.Double,System.Double,System.Double)">
            <summary>
              Calculate local mean time of rising or setting. By `local' is meant the
              exact time at the location, assuming that there were no time zone. That
              is, the time difference between the location and the Meridian depended
              entirely on the longitude. We can't do anything with this time directly;
              we must convert it to UTC and then to a local time. The result is
              expressed as a fractional number of hours since midnight
            </summary>
        </member>
        <member name="M:Zmanim.Calculator.SunTimesCalculator.GetTimeUtc(System.DateTime,Zmanim.Utilities.IGeoLocation,System.Double,System.Boolean)">
            <summary>
              Get sunrise or sunset time in UTC, according to flag.
            </summary>
            <param name="date">The date</param>
            <param name="location">The location</param>
            <param name="zenith">Sun's zenith, in degrees</param>
            <param name="isSunrise">type of calculation to carry out sunrise or sunset.
            </param>
            <returns> the time as a double. If an error was encountered in the
              calculation (expected behavior for some locations such as near
              the poles, <see cref="F:System.Double.NaN" /> will be returned. </returns>
        </member>
        <member name="T:Zmanim.Calculator.ZmanimCalculator">
            <summary>
              Implementation of sunrise and sunset methods to calculate astronomical times.
              This implementation is a port of the C++ algorithm written by Ken Bloom for
              the sourceforge.net <a href = "http://sourceforge.net/projects/zmanim/">Zmanim</a>
              project. Ken's algorithm is based on the US Naval Almanac algorithm. Added to
              Ken's code is adjustment of the zenith to account for elevation.
            </summary>
            <author>Ken Bloom</author>
            <author>Eliyahu Hershfeld</author>
            <remarks>
              Changed to LGPL with permission from the authors.
            </remarks>
        </member>
        <member name="P:Zmanim.Calculator.ZmanimCalculator.CalculatorName">
            <summary>
              Gets the name of the calculator/.
            </summary>
            <value></value>
        </member>
        <member name="M:Zmanim.Calculator.ZmanimCalculator.GetUtcSunrise(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunrise as well as any time based on an
            angle above or below sunrise. This abstract method is implemented by the
            classes that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90 degrees. for
            sunrise typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for
            the calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetBeginNauticalTwilight"/>
            that passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to
            this method.</param>
            <param name="adjustForElevation"></param>
            <returns>
            The UTC time of sunrise in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <see cref="F:System.Double.NaN"/> will be returned.
            </returns>
        </member>
        <member name="M:Zmanim.Calculator.ZmanimCalculator.GetUtcSunset(Zmanim.IDateWithLocation,System.Double,System.Boolean)">
            <summary>
            A method that calculates UTC sunset as well as any time based on an angle
            above or below sunset. This abstract method is implemented by the classes
            that extend this class.
            </summary>
            <param name="dateWithLocation">Used to calculate day of year.</param>
            <param name="zenith">the azimuth below the vertical zenith of 90°;. For sunset
            typically the <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">zenith</see> used for the
            calculation uses geometric zenith of 90°; and
            <see cref="M:Zmanim.Calculator.AstronomicalCalculator.AdjustZenith(System.Double,System.Double)">adjusts</see> this slightly to account for
            solar refraction and the sun's radius. Another example would
            be <see cref="M:Zmanim.AstronomicalCalendar.GetEndNauticalTwilight"/> that
            passes <see cref="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH"/> to this
            method.</param>
            <param name="adjustForElevation"></param>
            <returns>
            The UTC time of sunset in 24 hour format. 5:45:00 AM will return
            5.75.0. If an error was encountered in the calculation (expected
            behavior for some locations such as near the poles,
            <seealso cref="F:System.Double.NaN"/> will be returned.
            </returns>
        </member>
        <member name="T:Zmanim.Utilities.BitConverter">
            <summary>
            System.BitConverter.DoubleToInt64Bits method is not presents in Silverlight 3.
            </summary>
        </member>
        <member name="M:Zmanim.Utilities.BitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Zmanim.Utilities.GeoLocation">
            <summary>
              A class that contains location information such as latitude and longitude
              required for astronomical calculations. The elevation field is not used by
              most calculation engines and would be ignored if set. Check the documentation
              for specific implementations of the <seealso cref = "T:Zmanim.Calculator.AstronomicalCalculator" /> to see if
              elevation is calculated as part o the algorithm.
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="F:Zmanim.Utilities.GeoLocation.MINUTE_MILLIS">
            <summary>
              constant for milliseconds in a minute (60,000)
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.GeoLocation.HOUR_MILLIS">
            <summary>
              constant for milliseconds in an hour (3,600,000)
            </summary>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.#ctor(System.Double,System.Double,Zmanim.TimeZone.ITimeZone)">
            <summary>
              GeoLocation constructor with parameters for all required fields.
            </summary>
            <param name = "latitude">
              the latitude in a double format such as 40.095965 for
              Lakewood, NJ <br /> <b>Note: </b> For latitudes south of the
              equator, a negative value should be used. </param>
            <param name = "longitude">
              double the longitude in a double format such as -74.222130 for
              Lakewood, NJ. <br /> <b>Note: </b> For longitudes east of the
              <a href = "http://en.wikipedia.org/wiki/Prime_Meridian">Prime
                Meridian </a> (Greenwich), a negative value should be used. </param>
            <param name = "timeZone">
              the <c>TimeZone</c> for the location. </param>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.#ctor(System.String,System.Double,System.Double,Zmanim.TimeZone.ITimeZone)">
            <summary>
              GeoLocation constructor with parameters for all required fields.
            </summary>
            <param name = "name">
              The location name for display use such as &quot;Lakewood,
              NJ&quot; </param>
            <param name = "latitude">
              the latitude in a double format such as 40.095965 for
              Lakewood, NJ <br /> <b>Note: </b> For latitudes south of the
              equator, a negative value should be used. </param>
            <param name = "longitude">
              double the longitude in a double format such as -74.222130 for
              Lakewood, NJ. <br /> <b>Note: </b> For longitudes east of the
              <a href = "http://en.wikipedia.org/wiki/Prime_Meridian">Prime
                Meridian </a> (Greenwich), a negative value should be used. </param>
            <param name = "timeZone">
              the <c>TimeZone</c> for the location. </param>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.#ctor(System.String,System.Double,System.Double,System.Double,Zmanim.TimeZone.ITimeZone)">
            <summary>
              GeoLocation constructor with parameters for all required fields.
            </summary>
            <param name = "name">
              The location name for display use such as &quot;Lakewood,
              NJ&quot; </param>
            <param name = "latitude">
              the latitude in a double format such as 40.095965 for
              Lakewood, NJ <br /> <b>Note: </b> For latitudes south of the
              equator, a negative value should be used. </param>
            <param name = "longitude">
              double the longitude in a double format such as -74.222130 for
              Lakewood, NJ. <br /> <b>Note: </b> For longitudes east of the
              <a href = "http://en.wikipedia.org/wiki/Prime_Meridian">Prime
                Meridian </a> (Greenwich), a negative value should be used. </param>
            <param name = "elevation">
              the elevation above sea level in Meters. Elevation is not used
              in most algorithms used for calculating sunrise and set. </param>
            <param name = "timeZone">
              the <c>TimeZone</c> for the location. </param>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.#ctor">
            <summary>
              Default GeoLocation constructor will set location to the Prime Meridian
              at Greenwich, England and a TimeZone of GMT. The longitude will be set to
              0 and the latitude will be 51.4772 to match the location of the
              <a href = "http://www.rog.nmm.ac.uk">Royal Observatory, Greenwich </a>. No
              daylight savings time will be used.
            </summary>
        </member>
        <member name="P:Zmanim.Utilities.GeoLocation.Elevation">
            <summary>
              Method to get the elevation in Meters.
            </summary>
            <value> Returns the elevation in Meters. </value>
        </member>
        <member name="P:Zmanim.Utilities.GeoLocation.Latitude">
            <summary>
              Method to set the latitude.
            </summary>
            <value>
              The degrees of latitude to set. The values should be between
              -90° and 90°. An IllegalArgumentException will be
              thrown if the value exceeds the limit. For example 40.095965
              would be used for Lakewood, NJ. &lt;b&gt;Note: &lt;/b&gt; For latitudes south of the
              equator, a negative value should be used. </value>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.SetLatitude(System.Int32,System.Int32,System.Double,System.String)">
            <summary>
              Method to set the latitude in degrees, minutes and seconds.
            </summary>
            <param name = "degrees">
              The degrees of latitude to set between -90 and 90. An
              IllegalArgumentException will be thrown if the value exceeds
              the limit. For example 40 would be used for Lakewood, NJ. </param>
            <param name = "minutes"> <a href = "http://en.wikipedia.org/wiki/Minute_of_arc#Cartography">minutes of arc</a> </param>
            <param name = "seconds"> <a href = "http://en.wikipedia.org/wiki/Minute_of_arc#Cartography">seconds of arc</a> </param>
            <param name = "direction">
              N for north and S for south. An IllegalArgumentException will
              be thrown if the value is not S or N. </param>
        </member>
        <member name="P:Zmanim.Utilities.GeoLocation.Longitude">
            <summary>
              Method to set the longitude in a double format.
            </summary>
            <value>
              The degrees of longitude to set in a double format between
              -180° and 180°. An IllegalArgumentException will be
              thrown if the value exceeds the limit. For example -74.2094
              would be used for Lakewood, NJ. Note: for longitudes east of
              the &lt;a href = &quot;http://en.wikipedia.org/wiki/Prime_Meridian&quot;&gt;Prime
              Meridian&lt;/a&gt; (Greenwich) a negative value should be used. </value>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.SetLongitude(System.Int32,System.Int32,System.Double,System.String)">
            <summary>
              Method to set the longitude in degrees, minutes and seconds.
            </summary>
            <param name = "degrees">
              The degrees of longitude to set between -180 and 180. An
              IllegalArgumentException will be thrown if the value exceeds
              the limit. For example -74 would be used for Lakewood, NJ.
              Note: for longitudes east of the <a href = "http://en.wikipedia.org/wiki/Prime_Meridian">Prime
                                                 Meridian </a> (Greenwich) a negative value should be used. </param>
            <param name = "minutes"> <a href = "http://en.wikipedia.org/wiki/Minute_of_arc#Cartography">minutes of arc</a> </param>
            <param name = "seconds"> <a href = "http://en.wikipedia.org/wiki/Minute_of_arc#Cartography">seconds of arc</a> </param>
            <param name = "direction">
              E for east of the Prime Meridian or W for west of it. An
              IllegalArgumentException will be thrown if the value is not E
              or W. </param>
        </member>
        <member name="P:Zmanim.Utilities.GeoLocation.LocationName">
            <value> Returns the location name. </value>
        </member>
        <member name="P:Zmanim.Utilities.GeoLocation.TimeZone">
            <value> Returns the timeZone. </value>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.GetLocalMeanTimeOffset(System.DateTime)">
            <summary>
            A method that will return the location's local mean time offset in
            milliseconds from local standard time. The globe is split into 360°,
            with 15° per hour of the day. For a local that is at a longitude that
            is evenly divisible by 15 (longitude % 15 == 0), at solar
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunTransit">noon</see>
            (with adjustment for the <a href="http://en.wikipedia.org/wiki/Equation_of_time">equation of time</a>)
            the sun should be directly overhead, so a user who is 1° west of this
            will have noon at 4 minutes after standard time noon, and conversely, a
            user who is 1° east of the 15° longitude will have noon at 11:56
            AM.
            </summary>
            <param name="date">The date used to get the UtcOffset.</param>
            <returns>
            the offset in milliseconds not accounting for Daylight saving
            time. A positive value will be returned East of the timezone
            line, and a negative value West of it.
            </returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.GetGeodesicInitialBearing(Zmanim.Utilities.GeoLocation)">
            <summary>
              Calculate the initial <a href = "http://en.wikipedia.org/wiki/Great_circle">geodesic</a> bearing
              between this Object and a second Object passed to this method using
              <a href = "http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
              inverse formula See T Vincenty, "<a href = "http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
                                                 Solutions of Geodesics on the Ellipsoid with application of nested
                                                 equations</a>", Survey Review, vol XXII no 176, 1975
            </summary>
            <param name = "location">
              the destination location </param>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.GetGeodesicFinalBearing(Zmanim.Utilities.GeoLocation)">
            <summary>
              Calculate the final <a href = "http://en.wikipedia.org/wiki/Great_circle">geodesic</a> bearing
              between this Object and a second Object passed to this method using
              <a href = "http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
              inverse formula See T Vincenty, "<a href = "http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
                                                 Solutions of Geodesics on the Ellipsoid with application of nested
                                                 equations</a>", Survey Review, vol XXII no 176, 1975
            </summary>
            <param name = "location">
              the destination location </param>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.GetGeodesicDistance(Zmanim.Utilities.GeoLocation)">
            <summary>
              Calculate <a href = "http://en.wikipedia.org/wiki/Great-circle_distance">geodesic
                          distance</a> in Meters between this Object and a second Object passed to
              this method using <a href = "http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
              inverse formula See T Vincenty, "<a href = "http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
                                                 Solutions of Geodesics on the Ellipsoid with application of nested
                                                 equations</a>", Survey Review, vol XXII no 176, 1975
            </summary>
            <param name = "location">
              the destination location </param>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.VincentyFormula(Zmanim.Utilities.GeoLocation,System.Int32)">
            <summary>
              Calculate <a href = "http://en.wikipedia.org/wiki/Great-circle_distance">geodesic
                          distance</a> in Meters between this Object and a second Object passed to
              this method using <a href = "http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
              inverse formula See T Vincenty, "<a href = "http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
                                                 Solutions of Geodesics on the Ellipsoid with application of nested
                                                 equations</a>", Survey Review, vol XXII no 176, 1975
            </summary>
            <param name = "location">
              the destination location </param>
            <param name = "formula">
              This formula calculates initial bearing (<seealso cref = "F:Zmanim.Utilities.GeoLocation.INITIAL_BEARING" />),
              final bearing (<seealso cref = "F:Zmanim.Utilities.GeoLocation.FINAL_BEARING" />) and distance (<seealso cref = "F:Zmanim.Utilities.GeoLocation.DISTANCE" />). </param>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.GetRhumbLineBearing(Zmanim.Utilities.GeoLocation)">
            <summary>
              Returns the <a href = "http://en.wikipedia.org/wiki/Rhumb_line">rhumb line</a>
              bearing from the current location to the GeoLocation passed in.
            </summary>
            <param name = "location">
              destination location </param>
            <returns> the bearing in degrees </returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.GetRhumbLineDistance(Zmanim.Utilities.GeoLocation)">
            <summary>
              Returns the <a href = "http://en.wikipedia.org/wiki/Rhumb_line">rhumb line</a>
              distance from the current location to the GeoLocation passed in.
            </summary>
            <param name = "location">
              the destination location </param>
            <returns> the distance in Meters </returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.ToXml">
            <summary>
              A method that returns an XML formatted <c>String</c> representing
              the serialized <c>Object</c>. Very similar to the toString
              method but the return value is in an xml format. The format currently
              used (subject to change) is:
            	
              <code>
                &lt;GeoLocation&gt;
                &lt;LocationName&gt;Lakewood, NJ&lt;/LocationName&gt;
                &lt;Latitude&gt;40.0828&amp;deg&lt;/Latitude&gt;
                &lt;Longitude&gt;-74.2094&amp;deg&lt;/Longitude&gt;
                &lt;Elevation&gt;0 Meters&lt;/Elevation&gt;
                &lt;TimezoneName&gt;America/New_York&lt;/TimezoneName&gt;
                &lt;TimeZoneDisplayName&gt;Eastern Standard Time&lt;/TimeZoneDisplayName&gt;
                &lt;TimezoneGMTOffset&gt;-5&lt;/TimezoneGMTOffset&gt;
                &lt;TimezoneDSTOffset&gt;1&lt;/TimezoneDSTOffset&gt;
                &lt;/GeoLocation&gt;
              </code>
            </summary>
            <returns> The XML formatted <code>String</code>. </returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Zmanim.Utilities.GeoLocationUtils">
            <summary>
              A class for various location calculations
              Most of the code in this class is ported from <a href = "http://www.movable-type.co.uk/">Chris Veness'</a>
              <a href = "http://www.fsf.org/licensing/licenses/lgpl.html">LGPL</a> Javascript Implementation
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocationUtils.GetGeodesicInitialBearing(Zmanim.Utilities.GeoLocation,Zmanim.Utilities.GeoLocation)">
            <summary>
            Calculate the initial <a href="http://en.wikipedia.org/wiki/Great_circle">geodesic</a> bearing
            between this Object and a second Object passed to this method using <a href="http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
            inverse formula See T Vincenty, "<a href="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
            Solutions of Geodesics on the Ellipsoid with application of nested
            equations</a>", Survey Review, vol XXII no 176, 1975.
            </summary>
            <param name="location">the destination location</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocationUtils.GetGeodesicFinalBearing(Zmanim.Utilities.GeoLocation,Zmanim.Utilities.GeoLocation)">
            <summary>
            Calculate the final <a href="http://en.wikipedia.org/wiki/Great_circle">geodesic</a> bearing
            between this Object and a second Object passed to this method using <a href="http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
            inverse formula See T Vincenty, "<a href="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
            Solutions of Geodesics on the Ellipsoid with application of nested
            equations</a>", Survey Review, vol XXII no 176, 1975.
            </summary>
            <param name="location">the destination location</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocationUtils.GetGeodesicDistance(Zmanim.Utilities.GeoLocation,Zmanim.Utilities.GeoLocation)">
            <summary>
            Calculate <a href="http://en.wikipedia.org/wiki/Great-circle_distance">geodesic
            distance</a> in Meters between this Object and a second Object passed to
            this method using <a href="http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
            inverse formula See T Vincenty, "<a href="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
            Solutions of Geodesics on the Ellipsoid with application of nested
            equations</a>", Survey Review, vol XXII no 176, 1975.
            </summary>
            <param name="location">the destination location</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocationUtils.VincentyFormula(Zmanim.Utilities.GeoLocation,Zmanim.Utilities.GeoLocation,System.Int32)">
            <summary>
            Calculate <a href="http://en.wikipedia.org/wiki/Great-circle_distance">geodesic
            distance</a> in Meters between this Object and a second Object passed to
            this method using <a href="http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
            inverse formula See T Vincenty, "<a href="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
            Solutions of Geodesics on the Ellipsoid with application of nested
            equations</a>", Survey Review, vol XXII no 176, 1975.
            </summary>
            <param name="location">the destination location</param>
            <param name="destination">The destination.</param>
            <param name="formula">This formula calculates initial bearing (<seealso cref="F:Zmanim.Utilities.GeoLocationUtils.INITIAL_BEARING"/>),
            final bearing (<seealso cref="F:Zmanim.Utilities.GeoLocationUtils.FINAL_BEARING"/>) and distance (<seealso cref="F:Zmanim.Utilities.GeoLocationUtils.DISTANCE"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocationUtils.GetRhumbLineBearing(Zmanim.Utilities.GeoLocation,Zmanim.Utilities.GeoLocation)">
            <summary>
            Returns the <a href="http://en.wikipedia.org/wiki/Rhumb_line">rhumb line</a>
            bearing from the current location to the GeoLocation passed in.
            </summary>
            <param name="location">destination location</param>
            <param name="destination">The destination.</param>
            <returns>the bearing in degrees</returns>
        </member>
        <member name="M:Zmanim.Utilities.GeoLocationUtils.GetRhumbLineDistance(Zmanim.Utilities.GeoLocation,Zmanim.Utilities.GeoLocation)">
            <summary>
            Returns the <a href="http://en.wikipedia.org/wiki/Rhumb_line">rhumb line</a>
            distance from the current location to the GeoLocation passed in.
            Ported from <a href="http://www.movable-type.co.uk/">Chris Veness'</a> Javascript Implementation
            </summary>
            <param name="location">the destination location</param>
            <param name="destination">The destination.</param>
            <returns>the distance in Meters</returns>
        </member>
        <member name="T:Zmanim.Utilities.IGeoLocation">
            <summary>
             Contains location information such as latitude and longitude ... and TimeZone.
            </summary>
        </member>
        <member name="P:Zmanim.Utilities.IGeoLocation.Elevation">
            <summary>
              Method to get the elevation in Meters.
            </summary>
            <value> Returns the elevation in Meters. </value>
        </member>
        <member name="P:Zmanim.Utilities.IGeoLocation.Latitude">
            <summary>
              Method to set the latitude.
            </summary>
            <value>
              The degrees of latitude to set. The values should be between
              -90° and 90°. An IllegalArgumentException will be
              thrown if the value exceeds the limit. For example 40.095965
              would be used for Lakewood, NJ. &lt;b&gt;Note: &lt;/b&gt; For latitudes south of the
              equator, a negative value should be used. </value>
        </member>
        <member name="P:Zmanim.Utilities.IGeoLocation.Longitude">
            <summary>
              Method to set the longitude in a double format.
            </summary>
            <value>
              The degrees of longitude to set in a double format between
              -180° and 180°. An IllegalArgumentException will be
              thrown if the value exceeds the limit. For example -74.2094
              would be used for Lakewood, NJ. Note: for longitudes east of
              the &lt;a href = &quot;http://en.wikipedia.org/wiki/Prime_Meridian&quot;&gt;Prime
              Meridian&lt;/a&gt; (Greenwich) a negative value should be used. </value>
        </member>
        <member name="P:Zmanim.Utilities.IGeoLocation.LocationName">
            <value> Returns the location name. </value>
        </member>
        <member name="P:Zmanim.Utilities.IGeoLocation.TimeZone">
            <value> Returns the timeZone. </value>
        </member>
        <member name="M:Zmanim.Utilities.IGeoLocation.GetLocalMeanTimeOffset(System.DateTime)">
            <summary>
            A method that will return the location's local mean time offset in
            milliseconds from local standard time. The globe is split into 360°,
            with 15° per hour of the day. For a local that is at a longitude that
            is evenly divisible by 15 (longitude % 15 == 0), at solar
            <see cref="M:Zmanim.AstronomicalCalendar.GetSunTransit">noon</see>
            (with adjustment for the <a href="http://en.wikipedia.org/wiki/Equation_of_time">equation of time</a>)
            the sun should be directly overhead, so a user who is 1° west of this
            will have noon at 4 minutes after standard time noon, and conversely, a
            user who is 1° east of the 15° longitude will have noon at 11:56
            AM.
            </summary>
            <param name="date">The date used to get the UtcOffset.</param>
            <returns>
            the offset in milliseconds not accounting for Daylight saving
            time. A positive value will be returned East of the timezone
            line, and a negative value West of it.
            </returns>
        </member>
        <member name="M:Zmanim.Utilities.IGeoLocation.GetGeodesicInitialBearing(Zmanim.Utilities.GeoLocation)">
            <summary>
              Calculate the initial <a href = "http://en.wikipedia.org/wiki/Great_circle">geodesic</a> bearing
              between this Object and a second Object passed to this method using
              <a href = "http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
              inverse formula See T Vincenty, "<a href = "http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
                                                 Solutions of Geodesics on the Ellipsoid with application of nested
                                                 equations</a>", Survey Review, vol XXII no 176, 1975
            </summary>
            <param name = "location">
              the destination location </param>
        </member>
        <member name="M:Zmanim.Utilities.IGeoLocation.GetGeodesicFinalBearing(Zmanim.Utilities.GeoLocation)">
            <summary>
              Calculate the final <a href = "http://en.wikipedia.org/wiki/Great_circle">geodesic</a> bearing
              between this Object and a second Object passed to this method using
              <a href = "http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
              inverse formula See T Vincenty, "<a href = "http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
                                                 Solutions of Geodesics on the Ellipsoid with application of nested
                                                 equations</a>", Survey Review, vol XXII no 176, 1975
            </summary>
            <param name = "location">
              the destination location </param>
        </member>
        <member name="M:Zmanim.Utilities.IGeoLocation.GetGeodesicDistance(Zmanim.Utilities.GeoLocation)">
            <summary>
              Calculate <a href = "http://en.wikipedia.org/wiki/Great-circle_distance">geodesic
                          distance</a> in Meters between this Object and a second Object passed to
              this method using <a href = "http://en.wikipedia.org/wiki/Thaddeus_Vincenty">Thaddeus Vincenty's</a>
              inverse formula See T Vincenty, "<a href = "http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
                                                 Solutions of Geodesics on the Ellipsoid with application of nested
                                                 equations</a>", Survey Review, vol XXII no 176, 1975
            </summary>
            <param name = "location">
              the destination location </param>
        </member>
        <member name="M:Zmanim.Utilities.IGeoLocation.GetRhumbLineBearing(Zmanim.Utilities.GeoLocation)">
            <summary>
              Returns the <a href = "http://en.wikipedia.org/wiki/Rhumb_line">rhumb line</a>
              bearing from the current location to the GeoLocation passed in.
            </summary>
            <param name = "location">
              destination location </param>
            <returns> the bearing in degrees </returns>
        </member>
        <member name="M:Zmanim.Utilities.IGeoLocation.GetRhumbLineDistance(Zmanim.Utilities.GeoLocation)">
            <summary>
              Returns the <a href = "http://en.wikipedia.org/wiki/Rhumb_line">rhumb line</a>
              distance from the current location to the GeoLocation passed in.
            </summary>
            <param name = "location">
              the destination location </param>
            <returns> the distance in Meters </returns>
        </member>
        <member name="T:Zmanim.Utilities.Time">
            <summary>
            A class that represents a numeric time. Times that represent a time of day
            are stored as <seealso cref="T:System.DateTime"/>s in this API. The time class is used to
            represent numeric time such as the time in hours, minutes, seconds and
            milliseconds of a
            <see cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour">temporal hour</see>.
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="M:Zmanim.Utilities.Time.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.Utilities.Time"/> class.
            </summary>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:Zmanim.Utilities.Time.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.Utilities.Time"/> class.
            </summary>
            <param name="millis">The millis.</param>
        </member>
        <member name="M:Zmanim.Utilities.Time.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.Utilities.Time"/> class.
            </summary>
            <param name="millis">The millis.</param>
        </member>
        <member name="P:Zmanim.Utilities.Time.IsNegative">
            <summary>
            Determines whether this instance is negative.
            </summary>
            <value>
              &lt;c&gt;true&lt;/c&gt; if this instance is negative; otherwise, &lt;c&gt;false&lt;/c&gt;.
            </value>
        </member>
        <member name="P:Zmanim.Utilities.Time.Hours">
            <summary>
            Gets the hours.
            </summary>
            <value>Returns the hour.</value>
        </member>
        <member name="P:Zmanim.Utilities.Time.Minutes">
            <summary>
            Gets the minutes.
            </summary>
            <value>Returns the minutes.</value>
        </member>
        <member name="P:Zmanim.Utilities.Time.Seconds">
            <summary>
            Gets the seconds.
            </summary>
            <value>Returns the seconds.</value>
        </member>
        <member name="P:Zmanim.Utilities.Time.Milliseconds">
            <summary>
            Gets the milliseconds.
            </summary>
            <value>Returns the milliseconds.</value>
        </member>
        <member name="M:Zmanim.Utilities.Time.GetTime">
            <summary>
            Gets the time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zmanim.Utilities.Time.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Zmanim.Utilities.Zman">
            <summary>
            Wrapper class for an astronomical time, mostly used to sort collections of
            astronomical times.
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="M:Zmanim.Utilities.Zman.#ctor(System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.Utilities.Zman"/> class.
            </summary>
            <param name="date">The date.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:Zmanim.Utilities.Zman.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.Utilities.Zman"/> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="label">The label.</param>
        </member>
        <member name="P:Zmanim.Utilities.Zman.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value></value>
        </member>
        <member name="P:Zmanim.Utilities.Zman.ZmanTime">
            <summary>
            Gets the zman.
            </summary>
            <value></value>
        </member>
        <member name="P:Zmanim.Utilities.Zman.ZmanLabel">
            <summary>
            Gets the zman label.
            </summary>
            <value></value>
        </member>
        <member name="T:Zmanim.Utilities.ZmanimFormatter">
            <summary>
            A class used to format non <see cref="T:System.DateTime"/> times generated by the
            Zmanim package. For example the
            <see cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour"/> returns
            the length of the hour in milliseconds. This class can format this time.
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_XSD_FORMAT">
            <summary>
              Format using hours, minutes, seconds and milliseconds using the xsd:time
              format. This format will return 00.00.00.0 when formatting 0.
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.DECIMAL_FORMAT">
            <summary>
              Format using standard decimal format with 5 positions after the decimal.
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_FORMAT">
            <summary>
              Format using hours and minutes.
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT">
            <summary>
              Format using hours, minutes and seconds.
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_MILLIS_FORMAT">
            <summary>
              Format using hours, minutes, seconds and milliseconds.
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.MINUTE_MILLIS">
            <summary>
              constant for milliseconds in a minute (60,000)
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.HOUR_MILLIS">
            <summary>
              constant for milliseconds in an hour (3,600,000)
            </summary>
        </member>
        <member name="F:Zmanim.Utilities.ZmanimFormatter.XSD_DURATION_FORMAT">
            <summary>
              Format using the XSD Duration format. This is in the format of
              PT1H6M7.869S (P for period (duration), T for time, H, M and S indicate
              hours, minutes and seconds.
            </summary>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.#ctor(System.Int32,System.String)">
            <summary>
              ZmanimFormatter constructor using a formatter
            </summary>
            <param name = "format">
              int The formatting style to use. Using
              ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT will format the
              time time of 90*60*1000 + 1 as 1:30:00 </param>
            <param name = "dateFormat">The date format.</param>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.SetTimeFormat(System.Int32)">
            <summary>
              Sets the format to use for formatting.
            </summary>
            <param name = "format">
              int the format constant to use. </param>
        </member>
        <member name="P:Zmanim.Utilities.ZmanimFormatter.DateFormat">
            <summary>
              Gets the date format.
            </summary>
            <value></value>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.Format(System.Double)">
            <summary>
              A method that formats milliseconds into a time format.
            </summary>
            <param name = "milliseconds">
              The time in milliseconds. </param>
            <returns> String The formatted <c>String</c> </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.Format(System.Int32)">
            <summary>
              A method that formats milliseconds into a time format.
            </summary>
            <param name = "millis">
              The time in milliseconds. </param>
            <returns> String The formatted <c>String</c> </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.Format(Zmanim.Utilities.Time)">
            <summary>
              A method that formats <see cref = "T:Zmanim.Utilities.Time" />objects.
            </summary>
            <param name = "time">
              The time <c>Object</c> to be formatted. </param>
            <returns> String The formatted <c>String</c> </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.FormatDate(System.DateTime,Zmanim.IDateWithLocation)">
            <summary>
              Formats a date using this classe's <see cref = "P:Zmanim.Utilities.ZmanimFormatter.DateFormat">date format</see>.
            </summary>
            <param name = "date">
              the date to format </param>
            <param name = "dateWithLocation">
              the <see cref = "T:Zmanim.IDateWithLocation">TimeZone and DateTime</see> used to help format
              based on the Calendar's DST and other settings. </param>
            <returns> the formatted string </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.GetXSDate(System.DateTime,Zmanim.IDateWithLocation)">
            <summary>
              The date:date-time function returns the current date and time as a
              date/time string. The date/time string that's returned must be a string
              in the format defined as the lexical representation of xs:Date in
              <a href = "http://www.w3.org/TR/xmlschema11-2/#Date">[3.3.8 Date]</a>
              of <a href = "http://www.w3.org/TR/xmlschema11-2/">[XML Schema 1.1 Part 2:
                   Datatypes]</a>. The date/time format is basically CCYY-MM-DDThh:mm:ss,
              although implementers should consult <a href = "http://www.w3.org/TR/xmlschema11-2/">[XML Schema 1.1 Part 2:
                                                     Datatypes]</a> and <a href = "http://www.iso.ch/markete/8601.pdf">[ISO
                                                                          8601]</a> for details. The date/time string format must include a time
              zone, either a Z to indicate Coordinated Universal Time or a + or -
              followed by the difference between the difference from UTC represented as
              hh:mm.
            </summary>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.FormatDigits(System.Int32)">
            <summary>
              Represent the hours and minutes with two-digit strings.
            </summary>
            <param name = "digits"> hours or minutes. </param>
            <returns> two-digit String representation of hrs or minutes. </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.FormatXSDDurationTime(System.Int64)">
            <summary>
              This returns the xml representation of an xsd:duration object.
            </summary>
            <param name = "millis"> the duration in milliseconds </param>
            <returns> the xsd:duration formatted String </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.FormatXSDDurationTime(Zmanim.Utilities.Time)">
            <summary>
              This returns the xml representation of an xsd:duration object.
            </summary>
            <param name = "time"> the duration as a Time object  </param>
            <returns> the xsd:duration formatted String </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.ToXml(Zmanim.AstronomicalCalendar)">
            <summary>
              A method that returns an XML formatted <c>String</c> representing
              the serialized <c>Object</c>. The format used is:
            	
              <code>
                &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;net.sourceforge.zmanim.AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;25.4&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;
                &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;
                &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;
                ...
                &lt;/AstronomicalTimes&gt;
              </code>
            	
              Note that the output uses the <a href = "http://www.w3.org/TR/xmlschema11-2/#Date">xsd:Date</a>
              format for times such as sunrise, and <a href = "http://www.w3.org/TR/xmlschema11-2/#duration">xsd:duration</a>
              format for times that are a duration such as the length of a
              <see cref = "M:Zmanim.AstronomicalCalendar.GetTemporalHour">temporal hour</see>.
              The output of this method is returned by the <see cref = "M:Zmanim.AstronomicalCalendar.ToString" /> }.
            </summary>
            <returns> The XML formatted <c>String</c>. The format will be:
            	
              <code>
                &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;net.sourceforge.zmanim.AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;25.4&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;
                &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;
                &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;
                ...
                &lt;/AstronomicalTimes&gt;
              </code>
            </returns>
        </member>
        <member name="M:Zmanim.Utilities.ZmanimFormatter.IncludeMethod(System.Reflection.MethodInfo)">
            <summary>
              Determines if a method should be output by the <see cref = "M:Zmanim.Utilities.ZmanimFormatter.ToXml(Zmanim.AstronomicalCalendar)" />
            </summary>
            <param name = "method"> Should this method be inculeded. </param>
        </member>
        <member name="T:Zmanim.ZmanimCalendar">
            <summary>
            	<p> Description: A .NET library for calculating zmanim. </p>
            The zmanim library is an API is a specialized calendar that can calculate
            sunrise and sunset and Jewish <em>zmanim</em> (religious times) for prayers
            and other Jewish religious duties. For a much more extensive list of zmanim
            use the <seealso cref="T:Zmanim.ComplexZmanimCalendar"/> that extends this class. This class
            contains the main functionality of the Zmanim library. See documentation for
            the <seealso cref="T:Zmanim.ComplexZmanimCalendar"/> and <seealso cref="T:Zmanim.AstronomicalCalendar"/> for simple
            examples on using the API.<br/>
            	<b>Note:</b> It is important to read the technical notes on top of the
            <see cref="T:Zmanim.Calculator.AstronomicalCalculator"/> documentation. <h2>
            Disclaimer:</h2> While I did my best to get accurate results please do not
            rely on these zmanim for <em>halacha lemaaseh</em>.
            </summary>
            <author>Eliyahu Hershfeld</author>
        </member>
        <member name="F:Zmanim.ZmanimCalendar.ZENITH_16_POINT_1">
            <summary>
              The zenith of 16.1° below geometric zenith (90°). This
              calculation is used for calculating <em>alos</em> (dawn) and
              <em>tzais</em> (nightfall) in some opinions. This calculation is based on
              the calculation that the time between dawn and sunrise (and sunset to
              nightfall) is the time that is takes to walk 4 <em>mil</em> at 18 minutes
              a mil (<em>Ramba"m</em> and others). The sun's position at 72 minutes
              before <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> in Jerusalem on the equinox is
              16.1° below <see cref="F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>.
            </summary>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlosHashachar" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetAlos16Point1Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetTzais16Point1Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA16Point1Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanTfilaMGA16Point1Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaGedola16Point1Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetMinchaKetana16Point1Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetPlagHamincha16Point1Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetPlagAlos16Point1ToTzaisGeonim7Point083Degrees" />
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaAlos16Point1ToSunset" />
        </member>
        <member name="F:Zmanim.ZmanimCalendar.ZENITH_8_POINT_5">
            <summary>
              The zenith of 8.5° below geometric zenith (90°). This calculation
              is used for calculating <em>alos</em> (dawn) and <em>tzais</em>
              (nightfall) in some opinions. This calculation is based on the position
              of the sun 36 minutes after <see cref = "M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see> in Jerusalem on
              March 16, about 4 days before the equinox, the day that a solar hour is
              one hour, which is 8.5° below <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric zenith</see>.
              The Ohr Meir considers this the time that 3 small starts are
              visible, later than the required 3 medium stars.
            </summary>
            <seealso cref = "M:Zmanim.ZmanimCalendar.GetTzais" />
            <seealso cref = "M:Zmanim.ComplexZmanimCalendar.GetTzaisGeonim8Point5Degrees" />
        </member>
        <member name="M:Zmanim.ZmanimCalendar.#ctor">
            <summary>
              Default constructor will set a default <see cref = "T:Zmanim.Utilities.GeoLocation" />,
              a default <see cref = "M:Zmanim.Calculator.AstronomicalCalculator.GetDefault"> AstronomicalCalculator</see>
              and default the calendar to the current date.
            </summary>
            <seealso cref = "T:Zmanim.AstronomicalCalendar" />
        </member>
        <member name="M:Zmanim.ZmanimCalendar.#ctor(Zmanim.Utilities.IGeoLocation)">
            <summary>
              A constructor that takes a <seealso cref = "T:Zmanim.Utilities.GeoLocation" /> as a parameter.
            </summary>
            <param name = "location">
              the location </param>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.#ctor(System.DateTime,Zmanim.Utilities.IGeoLocation)">
            <summary>
            A constructor that takes a <seealso cref="T:Zmanim.Utilities.GeoLocation"/> as a parameter.
            </summary>
            <param name="date">The date.</param>
            <param name="location">the location</param>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.#ctor(Zmanim.IDateWithLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Zmanim.ZmanimCalendar"/> class.
            </summary>
            <param name="dateWithLocation">The date with location.</param>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetTzais">
            <summary>
            Returns <em>tzais</em> (nightfall) when the sun is 8.5° below the
            western geometric horizon (90°) after <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</seealso>. For
            information on the source of this calculation see
            <seealso cref="F:Zmanim.ZmanimCalendar.ZENITH_8_POINT_5"/>.
            </summary>
            <returns>
            The <code>DateTime</code> of nightfall.
            If the calculation can't be computed such as northern and southern locations
            even south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="F:Zmanim.ZmanimCalendar.ZENITH_8_POINT_5"/>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetAlosHashachar">
            <summary>
              Returns <em>alos</em> (dawn) based on the time when the sun is 16.1°
              below the eastern <see cref = "F:Zmanim.AstronomicalCalendar.GEOMETRIC_ZENITH">geometric horizon</see> before
              <see cref = "M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see>. For more information the source of 16.1°
              see <see cref = "F:Zmanim.ZmanimCalendar.ZENITH_16_POINT_1" />.
            </summary>
            <seealso cref = "F:Zmanim.ZmanimCalendar.ZENITH_16_POINT_1" />
            <returns>
              The <c>DateTime</c> of dawn.
             If the calculation can't be computed such as northern and southern locations
             even south of the Arctic Circle and north of the Antarctic Circle
             where the sun may not reach low enough below the horizon for this calculation,
             a null will be returned. See detailed explanation on top of the
             <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
             </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetAlos72">
            <summary>
              Method to return <em>alos</em> (dawn) calculated using 72 minutes before
              <see cref = "M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see> (no adjustment for
              elevation) based on the time to walk the distance of 4 <em>Mil</em> at 18
              minutes a <em>Mil</em>. This is based on the opinion of most
              <em>Rishonim</em> who stated that the time of the <em>Neshef</em> (time
              between dawn and sunrise) does not vary by the time of year or location
              but purely depends on the time it takes to walk the distance of 4
              <em>Mil</em>.
            </summary>
            <returns>
             the <c>DateTime</c> representing the time.
             If the calculation can't be computed such as northern and southern locations
             even south of the Arctic Circle and north of the Antarctic Circle
             where the sun may not reach low enough below the horizon for this calculation,
             a null will be returned. See detailed explanation on top of the
             <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
             </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetChatzos">
            <summary>
              This method returns <em>chatzos</em> (midday) following the opinion of
              the GRA that the day for Jewish halachic times start at
              <see cref = "M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</see> and ends at <see cref = "M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see>. The
              returned value is identical to <see cref = "M:Zmanim.AstronomicalCalendar.GetSunTransit" />
            </summary>
            <seealso cref = "M:Zmanim.AstronomicalCalendar.GetSunTransit" />
            <returns> the <c>DateTime</c> of chatzos.
             If the calculation can't be computed such as northern and southern locations
             even south of the Arctic Circle and north of the Antarctic Circle
             where the sun may not reach low enough below the horizon for this calculation,
             a null will be returned. See detailed explanation on top of the
             <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
              </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetSolarMidnight">
            <summary>
            A method that returns "solar" midnight, or the time when the sun is at its 
            <a href="http://en.wikipedia.org/wiki/Nadir">nadir</a>. <br/>
            <br/>
            <b>Note:</b> this method is experimental and might be removed.
            </summary>
            <returns> the <code>Date</code> of Solar Midnight (chatzos layla). If the calculation can't be computed such as in
                    the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it
                    does not set, a null will be returned. See detailed explanation on top of the
                    <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetSofZmanShma(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This is a generic method for calculating the latest <em>zman krias shema</em> (time to recite Shema in the
            morning) based on the start and end of day passed to the method. The time from the start of day to the end of day
            are divided into 12 shaos zmaniyos (temporal hours), and <em>zman krias shema</em> is calculated as 3 shaos
            zmaniyos from the beginning of the day. As an example, passing <seealso cref="!:GetSeaLevelSunrise">sea level sunrise</seealso>
            and <seealso cref="!:GetSeaLevelSunset">sea level sunset</seealso> to this method will return <em>zman krias shema</em> according to
            the opinion of the <em>GRA</em> and the <em>Baal Hatanya</em>.
            </summary>
            <param name="startOfDay">
                       the start of day for calculating <em>zman krias shema</em>. This can be sunrise or any alos passed to
                       this method. </param>
            <param name="endOfDay">
                       the start of day for calculating <em>zman krias shema</em>. This can be sunset or any tzais passed to
                       this method. </param>
            <returns> the <code>DateTime</code> of the latest zman shema based on the start and end of day times passed to this
                    method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day
                    a year where the sun does not rise, and one where it does not set, a null will be returned. See detailed
                    explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetSofZmanShmaGRA">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning). This time is 3
            <em><seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra">shaos zmaniyos</seealso></em> (solar hours) after <see cref = "M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level
            sunrise</see> based on the opinion of the <em>GRA</em> and the <em>Baal Hatanya</em> that the day is calculated from
            sunrise to sunset. This returns the time 3 * <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> after <see cref = "M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise"> sea
            level sunrise</see>.
            </summary>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetSofZmanShma(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
            <returns> the <code>DateTime</code> of the latest zman shema according to the GRA and Baal Hatanya. If the calculation
                    can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does
                    not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the
                    <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetSofZmanShmaMGA">
            <summary>
            This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) in the opinion of
            the <em>MGA</em> based on <em>alos</em> being 72 minutes before <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso>. This time is 3
            <em>shaos zmaniyos</em> (solar hours) after dawn based on the opinion of the <em>MGA</em> that the day is
            calculated from a dawn of 72 minutes before sunrise to nightfall of 72 minutes after sunset. This returns the
            time of 3 * <em>shaos zmaniyos</em> after dawn.
            </summary>
            <returns> the <code>DateTime</code> of the latest <em>zman shema</em>. If the calculation can't be computed such as in
                    the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it
                    does not set, a null will be returned. See detailed explanation on top of the
                    <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetSofZmanShma(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetShaahZmanis72Minutes"/>
            <seealso cref="!:ComplexZmanimCalendar.GetAlos72"/>
            <seealso cref="M:Zmanim.ComplexZmanimCalendar.GetSofZmanShmaMGA72Minutes"/>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetTzais72">
            <summary>
              This method returns the <em>tzais</em> (nightfall) based on the opinion
              of the <em>Ramba"m</em> and <em>Rabainu Tam</em> that <em>tzais</em> is
              calculated as the time it takes to walk 4 <em>Mil</em> at 18 minutes a
              <em>Mil</em> for a total of 72 minutes. Even for locations above sea
              level, this is calculated at sea level, since the darkness level is not
              affected by elevation.
            </summary>
            <returns> the <c>DateTime</c> representing 72 minutes after sea level sunset.
             If the calculation can't be computed such as northern and southern locations
             even south of the Arctic Circle and north of the Antarctic Circle
             where the sun may not reach low enough below the horizon for this calculation,
             a null will be returned. See detailed explanation on top of the
             <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
              </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetCandleLighting">
            <summary>
            A method to return candle lighting time. This is calculated as
            <seealso cref="P:Zmanim.ZmanimCalendar.CandleLightingOffset"/> minutes before sunset. This will
            return the time for any day of the week, since it can be
            used to calculate candle lighting time for <em>yom tov</em>
            (mid-week holidays) as well. To calculate the offset
            of non-sea level sunset, pass the elevation adjusted sunset to <seealso cref="M:Zmanim.AstronomicalCalendar.GetTimeOffset(System.Nullable{System.DateTime},System.Int64)"/>.
            </summary>
            <returns>
            candle lighting time.
            If the calculation can't be computed such as northern and southern locations
            even south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="P:Zmanim.ZmanimCalendar.CandleLightingOffset"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Zmanim.ZmanimCalendar.GetSofZmanTfila(System.Nullable{System.DateTime},System.Nullable{System.DateTime})" -->
        <member name="M:Zmanim.ZmanimCalendar.GetSofZmanTfilaGRA">
            <summary>
            This method returns the latest
            <em>zman tefilah<em> (time to pray morning prayers). This time is 4
            hours into the day based on the opinion of the <em>GR"A</em> and the
            </em>Baal Hatanya</em> that the day is calculated from sunrise to sunset.
            This returns the time 4 * <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> after
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman tefilah.
            If the calculation can't be computed such as northern and southern locations
            even south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetSofZmanTfilaMGA">
            <summary>
            This method returns the latest <em>zman tfila</em> (time to say the
            morning prayers) in the opinion of the <em>MG"A</em> based on
            <em>alos</em> being <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72">72</seealso> minutes before
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunrise">sunrise</seealso>. This time is 4
            <em><seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisMGA">shaos zmaniyos</seealso></em> (temporal hours)
            after <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</seealso> based on the opinion of the <em>MG"A</em>
            that the day is calculated from a <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</seealso> of 72 minutes
            before sunrise to <seealso cref="M:Zmanim.ZmanimCalendar.GetTzais72">nightfall</seealso> of 72 minutes after
            sunset. This returns the time of 4 * <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisMGA"/> after
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72">dawn</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the latest zman tfila.
            If the calculation can't be computed such as northern and southern locations
            even south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisMGA"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetAlos72"/>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This is a generic method for calulating <em>mincha gedola</em>. <em>Mincha gedola</em> is the earliest time one
            can pray mincha (6.5 hours from the begining of the day), based on the start and end of day passed to the method.
            The time from the start of day to the end of day are divided into 12 shaos zmaniyos, and <em>Mincha gedola</em>
            is calculated as 6.5 hours from the beginning of the day. As an example, passing {@link #getSeaLevelSunrise() sea
            level sunrise} and <seealso cref="!:#getSeaLevelSunset sea level sunset"/> to this method will return <em>Mincha gedola</em>
            according to the opinion of the <em>GRA</em> and the <em>Baal Hatanya</em>.
            </summary>
            <param name="startOfDay">
                       the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any alos passed to
                       this method. </param>
            <param name="endOfDay">
                       the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any alos passed to
                       this method. </param>
            <returns> the <code>Date</code> of the time of <em>Mincha gedola</em> based on the start and end of day times
                    passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is
                    at least one day a year where the sun does not rise, and one where it does not set, a null will be
                    returned. See detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetMinchaGedola">
            <summary>
            This method returns the time of <em>mincha gedola</em>.
            <em>Mincha gedola</em> is the earliest time one can pray mincha. The
            Ramba"m is of the opinion that it is better to delay <em>mincha</em>
            until <em><seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha ketana</seealso></em> while the
            <em>Ra"sh,
            Tur, GR"A</em> and others are of the opinion that <em>mincha</em> can be
            prayed <em>lechatchila</em> starting at <em>mincha gedola</em>. This is
            calculated as 6.5 <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra">sea level solar hours</seealso>
            after <seealso cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</seealso>. This calculation
            is calculated based on the opinion of the <em>GR"A</em> and the
            <em>Baal Hatanya</em> that the day is calculated from sunrise to sunset.
            This returns the time 6.5 <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> after
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha gedola.
            If the calculation can't be computed such as northern and southern locations
            even south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetMinchaKetana(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This is a generic method for calulating <em>mincha ketana</em>. <em>Mincha ketana</em> is the preferred time one
            can pray can pray <em>mincha</em> in the opinion of the Rambam and others (9.5 hours from the begining of the
            day), based on the start and end of day passed to the method. The time from the start of day to the end of day
            are divided into 12 shaos zmaniyos, and <em>mincha ketana</em> is calculated as 9.5 hours from the beginning of
            the day. As an example, passing <seealso cref="!:#getSeaLevelSunrise() sea level sunrise"/> and {@link #getSeaLevelSunset sea
            level sunset} to this method will return <em>Mincha ketana</em> according to the opinion of the <em>GRA</em> and
            the <em>Baal Hatanya</em>.
            </summary>
            <param name="startOfDay">
                       the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to
                       this method. </param>
            <param name="endOfDay">
                       the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to
                       this method. </param>
            <returns> the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times
                    passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is
                    at least one day a year where the sun does not rise, and one where it does not set, a null will be
                    returned. See detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetMinchaKetana">
            <summary>
            This method returns the time of <em>mincha ketana</em>. This is the
            perfered earliest time to pray <em>mincha</em> in the opinion of the
            Ramba"m and others. For more information on this see the documentation on
            <em><seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">mincha gedola</seealso></em>. This is calculated as
            9.5 <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra">sea level solar hours</seealso> after
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</seealso>. This calculation is
            calculated based on the opinion of the <em>GR"A</em> and the
            <em>Baal Hatanya</em> that the day is calculated from sunrise to sunset.
            This returns the time 9.5 * <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> after
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</seealso>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of mincha gedola.
            If the calculation can't be computed such as northern and southern locations
            even south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/>
            <seealso cref="M:Zmanim.ZmanimCalendar.GetMinchaGedola(System.Nullable{System.DateTime},System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetPlagHamincha(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            This is a generic method for calulating <em>plag hamincha</em> (1.25 hours before the end of the day) based on
            the start and end of day passed to the method. The time from the start of day to the end of day are divided into
            12 shaos zmaniyos, and plag is calculated as 10.75 hours from the beginning of the day. As an example, passing
            <seealso cref="!:#getSeaLevelSunrise() sea level sunrise"/> and <seealso cref="!:#getSeaLevelSunset sea level sunset"/> to this method
            will return Plag Hamincha according to the opinion of the <em>GRA</em> and the <em>Baal Hatanya</em>.
            </summary>
            <param name="startOfDay">
                       the start of day for calculating plag. This can be sunrise or any alos passed to this method. </param>
            <param name="endOfDay">
                       the start of day for calculating plag. This can be sunrise or any alos passed to this method. </param>
            <returns> the <code>Date</code> of the time of <em>plag hamincha</em> based on the start and end of day times
                    passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is
                    at least one day a year where the sun does not rise, and one where it does not set, a null will be
                    returned. See detailed explanation on top of the <seealso cref="T:Zmanim.AstronomicalCalendar"/> documentation. </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetPlagHamincha">
            <summary>
            This method returns he time of <em>plag hamincha</em>. This is calculated
            as 10.75 hours after sunrise. This calculation is calculated based on the
            opinion of the <em>GR"A</em> and the <em>Baal Hatanya</em> that the day
            is calculated from sunrise to sunset. This returns the time 10.75 *
            <see cref="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra"/> after <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see>.
            </summary>
            <returns>
            the <c>DateTime</c> of the time of <em>plag hamincha</em>.
            If the calculation can't be computed such as northern and southern locations
            even south of the Arctic Circle and north of the Antarctic Circle
            where the sun may not reach low enough below the horizon for this calculation,
            a null will be returned. See detailed explanation on top of the
            <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetShaahZmanisGra">
            <summary>
            Method to return a <em>shaah zmanis</em> (
            <see cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour(System.DateTime,System.DateTime)">temporal hour</see>) according to the
            opinion of the <em>GR"A</em> and the <em>Baal Hatanya</em>. This
            calculation divides the day based on the opinion of the <em>GR"A</em> and
            the <em>Baal Hatanya</em> that the day runs from <see cref="M:Zmanim.AstronomicalCalendar.GetSunrise"> sunrise</see>
            to <seealso cref="M:Zmanim.AstronomicalCalendar.GetSunset">sunset</seealso>. The calculations are based on a
            day from <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunrise">sea level sunrise</see> to
            <see cref="M:Zmanim.AstronomicalCalendar.GetSeaLevelSunset">sea level sunset</see>. The day is split into 12
            equal parts each part with each one being a <em>shaah zmanis</em>. This
            method is similar to <see cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour"/>, but all calculations are
            based on a sealevel sunrise and sunset. For additional information, see
            Zmanim Kehilchasam, 2nd Edition by Rabbi Dovid Yehuda Burstein,
            Jerusalem, 2007.
            </summary>
            <returns>
            the <code>long</code> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set,
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation on
            top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
            <seealso cref="M:Zmanim.AstronomicalCalendar.GetTemporalHour(System.DateTime,System.DateTime)"/>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetShaahZmanisMGA">
            <summary>
            Method to return a <em>shaah zmanis</em> (temporal hour) according to the
            opinion of the MGA. This calculation divides the day based on the opinion
            of the <em>MGA</em> that the day runs from dawn to dusk (for sof zman
            krias shema and tfila). Dawn for this calculation is 72 minutes before
            sunrise and dusk is 72 minutes after sunset. This day is split into 12
            equal parts with each part being a <em>shaah zmanis</em>. Alternate
            mothods of calculating a <em>shaah zmanis</em> are available in the
            subclass <see cref="T:Zmanim.ComplexZmanimCalendar"/>.
            </summary>
            <returns>
            the <code>long</code> millisecond length of a <em>shaah zmanis</em>.
            If the calculation can't be computed such
            as in the Arctic Circle where there is at least one day a year
            where the sun does not rise, and one where it does not set,
            <see cref="F:System.Int64.MinValue"/> will be returned. See detailed explanation on
            top of the <see cref="T:Zmanim.AstronomicalCalendar"/> documentation.
            </returns>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Zmanim.ZmanimCalendar.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Zmanim.ZmanimCalendar.CandleLightingOffset">
            <summary>
              A method to get the offset in minutes before
              <see cref = "M:Zmanim.AstronomicalCalendar.GetSunset">sunset</see> that is used in
              calculating candle lighting time. The default time used is 18 minutes
              before sunset. Some calendars use 15 minutes, while the custom in
              Jerusalem is to use a 40 minute offset. Please check the local custom for
              Candle lighting time.
            </summary>
            <value> Returns the candle lighting offset to set in minutes.. </value>
            <seealso cref = "M:Zmanim.ZmanimCalendar.GetCandleLighting" />
        </member>
    </members>
</doc>
