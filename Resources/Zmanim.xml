<?xml version="1.0"?>
<doc>
<assembly>
<name>
Zmanim
</name>
</assembly>
<members>
<member name="T:My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="F:Zmanim.AstronomicalCalendar.CIVIL_ZENITH">
 <summary>
   Sun's zenith at civil twilight (96°).
 </summary>
</member>
<member name="F:Zmanim.AstronomicalCalendar.NAUTICAL_ZENITH">
 <summary>
   Sun's zenith at nautical twilight (102°).
 </summary>
</member>
<member name="F:Zmanim.AstronomicalCalendar.ASTRONOMICAL_ZENITH">
 <summary>
   Sun's zenith at astronomical twilight (108°).
 </summary>
</member>
<member name="F:Zmanim.AstronomicalCalendar.MINUTE_MILLIS">
 <summary>
   constant for milliseconds in a minute (60,000)
 </summary>
</member>
<member name="F:Zmanim.AstronomicalCalendar.HOUR_MILLIS">
 <summary>
   constant for milliseconds in an hour (3,600,000)
 </summary>
</member>
<member name="M:Zmanim.AstronomicalCalendar.GetHashCode">
 <summary>
 Returns a hash code for this instance.
 </summary>
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
 </returns>
</member>
<member name="P:Zmanim.AstronomicalCalendar.AstronomicalCalculator">
 <summary>
 Gets or Sets the current AstronomicalCalculator set.
 </summary>
 <value>Returns the astronimicalCalculator.</value>
</member>
<member name="P:Zmanim.AstronomicalCalendar.DateWithLocation">
 <summary>
 Gets or Sets the Date and Location to be used in the calculations.
 </summary>
 <value>The calendar to set.</value>
</member>
<member name="T:Zmanim.Calculator.AstronomicalCalculator">
 <summary>
   An abstract class that all sun time calculating classes extend. This allows
   the algorithm used to be changed at runtime, easily allowing comparison the
   results of using different algorithms.
 </summary>
 <author>Eliyahu Hershfeld</author>
</member>
<member name="P:Zmanim.Calculator.AstronomicalCalculator.CalculatorName">
 <summary>
 A descriptive name of the algorithm.
 </summary>
 <value></value>
</member>
<member name="T:Zmanim.Calculator.IAstronomicalCalculator">
 <summary>
 A interface that defines the sservices needed to calculate sunrise and sunset.
 </summary>
</member>
<member name="P:Zmanim.Calculator.IAstronomicalCalculator.CalculatorName">
 <summary>
 A descriptive name of the algorithm.
 </summary>
</member>
<member name="F:Zmanim.Calculator.NOAACalculator.JULIAN_DAYS_PER_CENTURY">
 Julian days per century
</member>
<member name="P:Zmanim.Calculator.NOAACalculator.CalculatorName">
 <summary>
 Gets the name of the Calculator.
 </summary>
 <value>the descriptive name of the algorithm.</value>
</member>
<member name="P:Zmanim.Calculator.SunTimesCalculator.CalculatorName">
 <summary>
 </summary>
 <value>the descriptive name of the algorithm.</value>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.SinDeg(System.Double)">
 <summary>
  sin of an angle in degrees
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.AcosDeg(System.Double)">
 <summary>
  acos of an angle, result in degrees
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.AsinDeg(System.Double)">
 <summary>
  * asin of an angle, result in degrees
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.TanDeg(System.Double)">
 <summary>
  tan of an angle in degrees
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.CosDeg(System.Double)">
 <summary>
  cos of an angle in degrees
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.GetHoursFromMeridian(System.Double)">
 <summary>
  Get time difference between location's longitude and the Meridian, in
  hours. West of Meridian has a negative time difference
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.GetApproxTimeDays(System.Int32,System.Double,System.Boolean)">
 <summary>
  Gets the approximate time of sunset or sunrise In _days_ since midnight
  Jan 1st, assuming 6am and 6pm events. We need this figure to derive the
  Sun's mean anomaly
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.GetMeanAnomaly(System.Int32,System.Double,System.Boolean)">
 <summary>
  Calculate the Sun's mean anomaly in degrees, at sunrise or sunset, given
  the longitude in degrees
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.GetSunTrueLongitude(System.Double)">
 <summary>
  Calculates the Sun's true longitude in degrees. The result is an angle
  gte 0 and lt 360. Requires the Sun's mean anomaly, also in degrees
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.GetSunRightAscensionHours(System.Double)">
 <summary>
  Calculates the Sun's right ascension in hours, given the Sun's true
  longitude in degrees. Input and output are angles gte 0 and lt 360.
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.GetCosLocalHourAngle(System.Double,System.Double,System.Double)">
 <summary>
  Gets the cosine of the Sun's local hour angle
 </summary>
</member>
<member name="M:Zmanim.Calculator.SunTimesCalculator.GetLocalMeanTime(System.Double,System.Double,System.Double)">
 <summary>
  Calculate local mean time of rising or setting. By `local' is meant the
  exact time at the location, assuming that there were no time zone. That
  is, the time difference between the location and the Meridian depended
  entirely on the longitude. We can't do anything with this time directly;
  we must convert it to UTC and then to a local time. The result is
  expressed as a fractional number of hours since midnight
 </summary>
</member>
<member name="P:Zmanim.Calculator.ZmanimCalculator.CalculatorName">
 <summary>
   Gets the name of the calculator/.
 </summary>
 <value></value>
</member>
<member name="P:Zmanim.ComplexZmanimCalendar.AteretTorahSunsetOffset">
 <summary>
 Gets or Sets the offset in minutes after sunset for the Ateret Torah
 zmanim. The default if unset is 40 minutes. Chacham Yosef Harari-Raful of
 Yeshivat Ateret Torah uses 40 minutes globally with the exception of
 Israel where a 25 minute offset is used. This 25 minute (or any other)
 offset can be overridden by this methd. This offset impacts all Ateret
 Torah methods.
 --
 Returns the offset in minutes after sunset used to calculate
 <em>tzais</em> for the Ateret Torah zmanim. The defaullt value is 40
 minutes.
 </summary>
 <value>the number of minutes after sunset to use as an offset for the
   Ateret Torah &lt;em&gt;tzais&lt;/em&gt;</value>
</member>
<member name="M:Zmanim.ComplexZmanimCalendar.GetHashCode">
 <summary>
 Returns a hash code for this instance.
 </summary>
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
 </returns>
</member>
<member name="F:Zmanim.ComplexZmanimCalendar.ZENITH_19_DEGREES">
 Below are Methods added to kosherjava and not yet ported to NET            
</member>
<member name="T:Zmanim.DateWithLocation">
 <summary>
 A simple implementation of ITimeZoneDateTime.
 </summary>
</member>
<member name="P:Zmanim.DateWithLocation.Date">
 <summary>
 Gets or sets the date.
 </summary>
 <value>The date.</value>
</member>
<member name="P:Zmanim.DateWithLocation.Location">
 <summary>
 Gets or sets the location.
 </summary>
 <value>The location.</value>
</member>
<member name="T:Zmanim.Extensions.DateExtensions">
 <summary>
 DateTime extensions.
 </summary>
</member>
<member name="T:Zmanim.Extensions.MathExtensions">
 <summary>
 Math helpers.
 </summary>
</member>
<member name="P:Zmanim.IAstronomicalCalendar.AstronomicalCalculator">
 <summary>
 Gets or Sets the current AstronomicalCalculator set.
 </summary>
 <value>Returns the astronimicalCalculator.</value>
</member>
<member name="P:Zmanim.IAstronomicalCalendar.DateWithLocation">
 <summary>
 Gets or Sets the calender to be used in the calculations.
 </summary>
 <value>The calendar to set.</value>
</member>
<member name="T:Zmanim.IDateWithLocation">
 <summary>
 The GeoLocation and DateTime.
 </summary>
</member>
<member name="P:Zmanim.IDateWithLocation.Date">
 <summary>
 Gets or sets the date.
 </summary>
 <value>The date.</value>
</member>
<member name="P:Zmanim.IDateWithLocation.Location">
 <summary>
 Gets or sets the location.
 </summary>
 <value>The location.</value>
</member>
<member name="P:Zmanim.JewishCalendar.Daf.MasechtaNumber">
 <returns> the masechtaNumber </returns>
</member>
<member name="P:Zmanim.JewishCalendar.Daf.Page">
 <summary>
 Returns the daf (page number) of the Daf Yomi </summary>
 <returns> the daf (page number) of the Daf Yomi </returns>
</member>
<member name="P:Zmanim.JewishCalendar.Daf.MasechtaTransliterated">
 <summary>
 Returns the transliterated name of the masechta (tractate) of the Daf Yomi. The list of mashechtos is: Berachos,
 Shabbos, Eruvin, Pesachim, Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan, Chagigah,
 Yevamos, Kesubos, Nedarim, Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin,
 Makkos, Shevuos, Avodah Zarah, Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah,
 Kinnim, Tamid, Midos and Niddah.
 </summary>
 <returns> the transliterated name of the masechta (tractate) of the Daf Yomi such as Berachos. </returns>
</member>
<member name="P:Zmanim.JewishCalendar.Daf.SecondaryMasechtaTransliterated">
 <summary>
 Returns the transliterated name of the second masechta (tractate) of the Daf Yomi.
 Kinnim, Tamid.
 </summary>
 <returns> the transliterated name of the second masechta (tractate) of the Daf Yomi
 when on the first Daf of Kinnim or Tamid. </returns>
</member>
<member name="P:Zmanim.JewishCalendar.Daf.Masechta">
 <summary>
 Returns the masechta (tractate) of the Daf Yomi in Hebrew, It will return
 &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.
 </summary>
 <returns> the masechta (tractate) of the Daf Yomi in Hebrew, It will return
         &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos. </returns>
</member>
<member name="P:Zmanim.JewishCalendar.Daf.SecondaryMasechta">
 <summary>
 Returns the secondary masechta (tractate) of the Daf Yomi in Hebrew, It will only return
 For Kinnim and Tamid when on the first Daf \u05E7\u05D9\u05E0\u05D9\u05DD for Tamid.
 </summary>
 <returns> the secondary masechta (tractate) of the Daf Yomi in Hebrew, It will only return
 For Kinnim and Tamid when on the first Daf \u05E7\u05D9\u05E0\u05D9\u05DD for Tamid.</returns>
</member>
<member name="M:Zmanim.JewishCalendar.JewishCalendar.GetSpecialShabbos(System.DateTime)">
<summary>
 Returns a parsha Enum If the Shabbos Is one Of the four parshiyos Of Parsha.SHKALIM, Parsha.ZACHOR, Parsha.PARA,
 Parsha.HACHODESH Or Parsha.NONE for a regular Shabbos (Or any weekday).
 Nyk added SHUVA SHIRAH HAGADOL CHAZON NACHAMU
 </summary>
 <param name="dt">the The date to check</param>
</member>
<member name="M:Zmanim.JewishCalendar.JewishCalendar.GetElapsedDays(System.DateTime)">
<summary>
 Returns the number of days elapsed from the Sunday prior to the start of the Jewish calendar to the date entered
 </summary>
 <param name="dt">the date to use</param>
 <returns>
 the number of days elapsed from prior to the molad Tohu BaHaRaD (Be = Monday, Ha= 5 hours and Rad =204 chalakim/parts) prior to the start of the Jewish calendar, 
 BeHaRaD is 23:11:20 on Sunday night(5 hours 204/1080 chalakim after sunset on Sunday evening).
 </returns>
</member>
<member name="T:Zmanim.TimeZone.ITimeZone">
 <summary>
 Provides the most basic useage of a TimeZone.
 </summary>
</member>
<member name="M:Zmanim.TimeZone.ITimeZone.GetId">
 <summary>
 Gets the ID of this time zone.
 </summary>
 <returns>the ID of this time zone.</returns>
</member>
<member name="M:Zmanim.TimeZone.ITimeZone.GetDisplayName">
 <summary>
 Returns a name of this time zone suitable for presentation to the user in the default locale. 
 This method returns the long name, not including daylight savings.
 If the display name is not available for the locale, then this method returns a string in the normalized custom ID format.
 </summary>
 <returns></returns>
</member>
<member name="T:Zmanim.TimeZone.OffsetTimeZone">
 <summary>
 TimeZone based on the Gmt offset (this is very limited)
 </summary>
</member>
<member name="P:Zmanim.TimeZone.WindowsTimeZone.TimeZone">
 <summary>
 Gets or sets the time zone.
 </summary>
 <value>The time zone.</value>
</member>
<member name="M:Zmanim.TimeZone.WindowsTimeZone.GetId">
 <summary>
 Gets the ID of this time zone.
 </summary>
 <returns>the ID of this time zone.</returns>
</member>
<member name="M:Zmanim.TimeZone.WindowsTimeZone.GetDisplayName">
 <summary>
 Returns a name of this time zone suitable for presentation to the user in the default locale.
 This method returns the long name, not including daylight savings.
 If the display name is not available for the locale, then this method returns a string in the normalized custom ID format.
 </summary>
 <returns></returns>
</member>
<member name="T:Zmanim.Utilities.BitConverter">
 <summary>
 System.BitConverter.DoubleToInt64Bits method is not presents in Silverlight 3.
 </summary>
</member>
<member name="F:Zmanim.Utilities.GeoLocation.MINUTE_MILLIS">
 <summary>
   constant for milliseconds in a minute (60,000)
 </summary>
</member>
<member name="F:Zmanim.Utilities.GeoLocation.HOUR_MILLIS">
 <summary>
   constant for milliseconds in an hour (3,600,000)
 </summary>
</member>
<member name="P:Zmanim.Utilities.GeoLocation.Elevation">
 <summary>
  Method to get the elevation in Meters.
 </summary>
 <value> Returns the elevation in Meters. </value>
</member>
<member name="P:Zmanim.Utilities.GeoLocation.Latitude">
 <summary>
  Method to set the latitude.
 </summary>
 <value>
  The degrees of latitude to set. The values should be between
  -90° and 90°. An IllegalArgumentException will be
  thrown if the value exceeds the limit. For example 40.095965
  would be used for Lakewood, NJ. &lt;b&gt;Note: &lt;/b&gt; For latitudes south of the
  equator, a negative value should be used. </value>
</member>
<member name="P:Zmanim.Utilities.GeoLocation.Longitude">
 <summary>
  Method to set the longitude in a double format.
 </summary>
 <value>
  The degrees of longitude to set in a double format between
  -180° and 180°. An IllegalArgumentException will be
  thrown if the value exceeds the limit. For example -74.2094
  would be used for Lakewood, NJ. Note: for longitudes east of
  the &lt;a href = &quot;http://en.wikipedia.org/wiki/Prime_Meridian&quot;&gt;Prime
  Meridian&lt;/a&gt; (Greenwich) a negative value should be used. </value>
</member>
<member name="P:Zmanim.Utilities.GeoLocation.LocationName">
 <value> Returns the location name. </value>
</member>
<member name="P:Zmanim.Utilities.GeoLocation.TimeZone">
 <value> Returns the timeZone. </value>
</member>
<member name="M:Zmanim.Utilities.GeoLocation.ToXml">
 <summary>
  A method that returns an XML formatted <c>String</c> representing
  the serialized <c>Object</c>. Very similar to the toString
  method but the return value is in an xml format. The format currently
  used (subject to change) is:
 	
  <code>
    &lt;GeoLocation&gt;
    &lt;LocationName&gt;Lakewood, NJ&lt;/LocationName&gt;
    &lt;Latitude&gt;40.0828&amp;deg&lt;/Latitude&gt;
    &lt;Longitude&gt;-74.2094&amp;deg&lt;/Longitude&gt;
    &lt;Elevation&gt;0 Meters&lt;/Elevation&gt;
    &lt;TimezoneName&gt;America/New_York&lt;/TimezoneName&gt;
    &lt;TimeZoneDisplayName&gt;Eastern Standard Time&lt;/TimeZoneDisplayName&gt;
    &lt;TimezoneGMTOffset&gt;-5&lt;/TimezoneGMTOffset&gt;
    &lt;TimezoneDSTOffset&gt;1&lt;/TimezoneDSTOffset&gt;
    &lt;/GeoLocation&gt;
  </code>
 </summary>
 <returns> The XML formatted <code>String</code>. </returns>
</member>
<member name="M:Zmanim.Utilities.GeoLocation.GetHashCode">
 <summary>
 Returns a hash code for this instance.
 </summary>
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
 </returns>
</member>
<member name="T:Zmanim.Utilities.IGeoLocation">
 <summary>
 Contains location information such as latitude and longitude ... and TimeZone.
 </summary>
</member>
<member name="P:Zmanim.Utilities.IGeoLocation.Elevation">
 <summary>
  Method to get the elevation in Meters.
 </summary>
 <value> Returns the elevation in Meters. </value>
</member>
<member name="P:Zmanim.Utilities.IGeoLocation.Latitude">
 <summary>
  Method to set the latitude.
 </summary>
 <value>
  The degrees of latitude to set. The values should be between
  -90° and 90°. An IllegalArgumentException will be
  thrown if the value exceeds the limit. For example 40.095965
  would be used for Lakewood, NJ. &lt;b&gt;Note: &lt;/b&gt; For latitudes south of the
  equator, a negative value should be used. </value>
</member>
<member name="P:Zmanim.Utilities.IGeoLocation.Longitude">
 <summary>
  Method to set the longitude in a double format.
 </summary>
 <value>
  The degrees of longitude to set in a double format between
  -180° and 180°. An IllegalArgumentException will be
  thrown if the value exceeds the limit. For example -74.2094
  would be used for Lakewood, NJ. Note: for longitudes east of
  the &lt;a href = &quot;http://en.wikipedia.org/wiki/Prime_Meridian&quot;&gt;Prime
  Meridian&lt;/a&gt; (Greenwich) a negative value should be used. </value>
</member>
<member name="P:Zmanim.Utilities.IGeoLocation.LocationName">
 <value> Returns the location name. </value>
</member>
<member name="P:Zmanim.Utilities.IGeoLocation.TimeZone">
 <value> Returns the timeZone. </value>
</member>
<member name="P:Zmanim.Utilities.Time.IsNegative">
 <summary>
 Determines whether this instance is negative.
 </summary>
 <value>
   &lt;c&gt;true&lt;/c&gt; if this instance is negative; otherwise, &lt;c&gt;false&lt;/c&gt;.
 </value>
</member>
<member name="P:Zmanim.Utilities.Time.Hours">
 <summary>
 Gets the hours.
 </summary>
 <value>Returns the hour.</value>
</member>
<member name="P:Zmanim.Utilities.Time.Minutes">
 <summary>
 Gets the minutes.
 </summary>
 <value>Returns the minutes.</value>
</member>
<member name="P:Zmanim.Utilities.Time.Seconds">
 <summary>
 Gets the seconds.
 </summary>
 <value>Returns the seconds.</value>
</member>
<member name="P:Zmanim.Utilities.Time.Milliseconds">
 <summary>
 Gets the milliseconds.
 </summary>
 <value>Returns the milliseconds.</value>
</member>
<member name="M:Zmanim.Utilities.Time.GetTime">
 <summary>
 Gets the time.
 </summary>
 <returns></returns>
</member>
<member name="T:Zmanim.Utilities.Zman">
 <summary>
 Wrapper class for an astronomical time, mostly used to sort collections of
 astronomical times.
 </summary>
 <author>Eliyahu Hershfeld</author>
</member>
<member name="P:Zmanim.Utilities.Zman.Duration">
 <summary>
 Gets the duration.
 </summary>
 <value></value>
</member>
<member name="P:Zmanim.Utilities.Zman.ZmanTime">
 <summary>
 Gets the zman.
 </summary>
 <value></value>
</member>
<member name="P:Zmanim.Utilities.Zman.ZmanLabel">
 <summary>
 Gets the zman label.
 </summary>
 <value></value>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_XSD_FORMAT">
 <summary>
  Format using hours, minutes, seconds and milliseconds using the xsd:time
  format. This format will return 00.00.00.0 when formatting 0.
 </summary>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.DECIMAL_FORMAT">
 <summary>
  Format using standard decimal format with 5 positions after the decimal.
 </summary>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_FORMAT">
 <summary>
   Format using hours and minutes.
 </summary>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT">
 <summary>
   Format using hours, minutes and seconds.
 </summary>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.SEXAGESIMAL_MILLIS_FORMAT">
 <summary>
   Format using hours, minutes, seconds and milliseconds.
 </summary>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.MINUTE_MILLIS">
 <summary>
   constant for milliseconds in a minute (60,000)
 </summary>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.HOUR_MILLIS">
 <summary>
   constant for milliseconds in an hour (3,600,000)
 </summary>
</member>
<member name="F:Zmanim.Utilities.ZmanimFormatter.XSD_DURATION_FORMAT">
 <summary>
  Format using the XSD Duration format. This is in the format of
  PT1H6M7.869S (P for period (duration), T for time, H, M and S indicate
  hours, minutes and seconds.
 </summary>
</member>
<member name="M:Zmanim.Utilities.ZmanimFormatter.#ctor">
 <summary>
 </summary>
</member>
<member name="P:Zmanim.Utilities.ZmanimFormatter.DateFormat">
 <summary>
   Gets the date format.
 </summary>
 <value></value>
</member>
<member name="M:Zmanim.ZmanimCalendar.GetHashCode">
 <summary>
 Returns a hash code for this instance.
 </summary>
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
 </returns>
</member>
</members>
</doc>
